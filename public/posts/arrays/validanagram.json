{
  "id": "arrays/validanagram",
  "contentHtml": "<h1>Valid Anagram</h1>\n<p>You have two strings s and t.</p>\n<p>You must return True if they are both anagrams of each other, False otherwise.</p>\n<h2>How to Solve?</h2>\n<p>First, think about an edge case. If you have two strings, where:</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>s</mi><mo>=</mo><mi>\"</mi><mi>a</mi><mi>n</mi><mi>a</mi><mi>\"</mi></mrow><annotation>s = \"ana\"</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\"></span><span class=\"mrel\">=</span><span class=\"mspace\"></span></span><span class=\"base\"><span class=\"strut\"></span><span class=\"mord\">\"</span><span class=\"mord mathnormal\">ana</span><span class=\"mord\">\"</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mo>=</mo><mi>\"</mi><mi>a</mi><mi>n</mi><mi>\"</mi></mrow><annotation>t = \"an\"</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\"></span><span class=\"mrel\">=</span><span class=\"mspace\"></span></span><span class=\"base\"><span class=\"strut\"></span><span class=\"mord\">\"</span><span class=\"mord mathnormal\">an</span><span class=\"mord\">\"</span></span></span></span></li>\n</ul>\n<p>You'll find that the number of a's is 2 for string s and the number of a's for string t is 1.</p>\n<ul>\n<li>Immediately, you want to check if the strings are not equal and return false since they will never be anagrams.</li>\n</ul>\n<h3>Sorting</h3>\n<p>Sorting is not optimal, because the fastest sorting algorithm is merge sort. A merge sort algorithm takes a runtime of:</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo>)</mo></mrow><annotation>O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>.</li>\n</ul>\n<p>However, the space complexity is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation>O(1)</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>.</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>s</mi><mo>=</mo><mi>\"</mi><mi>a</mi><mi>n</mi><mi>a</mi><mi>g</mi><mi>r</mi><mi>a</mi><mi>m</mi><mi>\"</mi></mrow><annotation>s = \"anagram\"</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\"></span><span class=\"mrel\">=</span><span class=\"mspace\"></span></span><span class=\"base\"><span class=\"strut\"></span><span class=\"mord\">\"</span><span class=\"mord mathnormal\">ana</span><span class=\"mord mathnormal\">g</span><span class=\"mord mathnormal\">r</span><span class=\"mord mathnormal\">am</span><span class=\"mord\">\"</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mo>=</mo><mi>\"</mi><mi>n</mi><mi>a</mi><mi>a</mi><mi>g</mi><mi>r</mi><mi>a</mi><mi>m</mi><mi>\"</mi></mrow><annotation>t = \"naagram\"</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\"></span><span class=\"mrel\">=</span><span class=\"mspace\"></span></span><span class=\"base\"><span class=\"strut\"></span><span class=\"mord\">\"</span><span class=\"mord mathnormal\">naa</span><span class=\"mord mathnormal\">g</span><span class=\"mord mathnormal\">r</span><span class=\"mord mathnormal\">am</span><span class=\"mord\">\"</span></span></span></span></li>\n</ul>\n<p>After sorting:</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>s</mi><mo>=</mo><mi>\"</mi><mi>a</mi><mi>n</mi><mi>a</mi><mi>g</mi><mi>r</mi><mi>a</mi><mi>m</mi><mi>\"</mi></mrow><annotation>s = \"anagram\"</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\"></span><span class=\"mrel\">=</span><span class=\"mspace\"></span></span><span class=\"base\"><span class=\"strut\"></span><span class=\"mord\">\"</span><span class=\"mord mathnormal\">ana</span><span class=\"mord mathnormal\">g</span><span class=\"mord mathnormal\">r</span><span class=\"mord mathnormal\">am</span><span class=\"mord\">\"</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mo>=</mo><mi>\"</mi><mi>a</mi><mi>n</mi><mi>a</mi><mi>g</mi><mi>r</mi><mi>a</mi><mi>m</mi><mi>\"</mi></mrow><annotation>t = \"anagram\"</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\"></span><span class=\"mrel\">=</span><span class=\"mspace\"></span></span><span class=\"base\"><span class=\"strut\"></span><span class=\"mord\">\"</span><span class=\"mord mathnormal\">ana</span><span class=\"mord mathnormal\">g</span><span class=\"mord mathnormal\">r</span><span class=\"mord mathnormal\">am</span><span class=\"mord\">\"</span></span></span></span></li>\n</ul>\n<p>You can then return True if both of these strings match each other like the above example or False otherwise.</p>\n<h3>Hash Map Solution</h3>\n<p>A hash map solution requires us to count the number of instances a character appears in a string.\nBy running through two examples, we can understand how hash maps help us in this problem.</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>s</mi><mo>=</mo><mi>\"</mi><mi>a</mi><mi>n</mi><mi>a</mi><mi>g</mi><mi>r</mi><mi>a</mi><mi>m</mi><mi>\"</mi></mrow><annotation>s = \"anagram\"</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\"></span><span class=\"mrel\">=</span><span class=\"mspace\"></span></span><span class=\"base\"><span class=\"strut\"></span><span class=\"mord\">\"</span><span class=\"mord mathnormal\">ana</span><span class=\"mord mathnormal\">g</span><span class=\"mord mathnormal\">r</span><span class=\"mord mathnormal\">am</span><span class=\"mord\">\"</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mo>=</mo><mi>\"</mi><mi>n</mi><mi>a</mi><mi>a</mi><mi>g</mi><mi>r</mi><mi>a</mi><mi>m</mi><mi>\"</mi></mrow><annotation>t = \"naagram\"</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\"></span><span class=\"mrel\">=</span><span class=\"mspace\"></span></span><span class=\"base\"><span class=\"strut\"></span><span class=\"mord\">\"</span><span class=\"mord mathnormal\">naa</span><span class=\"mord mathnormal\">g</span><span class=\"mord mathnormal\">r</span><span class=\"mord mathnormal\">am</span><span class=\"mord\">\"</span></span></span></span></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Character</th>\n<th>Number</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a</td>\n<td>3</td>\n</tr>\n<tr>\n<td>n</td>\n<td>1</td>\n</tr>\n<tr>\n<td>g</td>\n<td>1</td>\n</tr>\n<tr>\n<td>r</td>\n<td>1</td>\n</tr>\n<tr>\n<td>m</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Note how both of these share the same hash map as shown above, because each character appears the same number of times.</li>\n</ul>\n<h4>Counter Example</h4>\n<p>What if the strings are not the same, how would the hash maps look like?</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>s</mi><mo>=</mo><mi>\"</mi><mi>a</mi><mi>n</mi><mi>a</mi><mi>\"</mi></mrow><annotation>s = \"ana\"</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\"></span><span class=\"mrel\">=</span><span class=\"mspace\"></span></span><span class=\"base\"><span class=\"strut\"></span><span class=\"mord\">\"</span><span class=\"mord mathnormal\">ana</span><span class=\"mord\">\"</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mo>=</mo><mi>\"</mi><mi>r</mi><mi>a</mi><mi>t</mi><mi>\"</mi></mrow><annotation>t = \"rat\"</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\"></span><span class=\"mrel\">=</span><span class=\"mspace\"></span></span><span class=\"base\"><span class=\"strut\"></span><span class=\"mord\">\"</span><span class=\"mord mathnormal\">r</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">\"</span></span></span></span></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Character</th>\n<th>Number</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a</td>\n<td>2</td>\n</tr>\n<tr>\n<td>n</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>The above hash map account for s.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Character</th>\n<th>Number</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>r</td>\n<td>1</td>\n</tr>\n<tr>\n<td>a</td>\n<td>1</td>\n</tr>\n<tr>\n<td>t</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>The above hash map accounts for t.</li>\n</ul>\n<p>Note how the two hash maps are not the same. We know from looking at the count of the characters from a hash map, these are not going to be anagrams.</p>\n<h4>Helpful Hints</h4>\n<ul>\n<li>\n<p>Remember that the edge case is when two strings are of different lengths. Always return False in this case.</p>\n</li>\n<li>\n<p>How do you initialize a hash map in Python?</p>\n<ul>\n<li>x = {}</li>\n</ul>\n</li>\n<li>\n<p>How do you get the count of a hash map?</p>\n<ul>\n<li>Use a <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mi>o</mi><mi>r</mi></mrow><annotation>for</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">f</span><span class=\"mord mathnormal\">or</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>w</mi><mi>h</mi><mi>i</mi><mi>l</mi><mi>e</mi></mrow><annotation>while</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">w</span><span class=\"mord mathnormal\">hi</span><span class=\"mord mathnormal\">l</span><span class=\"mord mathnormal\">e</span></span></span></span> loop starting at index 0 to n - 1.</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo>[</mo><mi>s</mi><mi>t</mi><mi>r</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>]</mo><mo>=</mo><mn>1</mn><mo>+</mo><mi>x</mi><mi>.</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo>(</mo><mi>s</mi><mi>t</mi><mi>r</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>,</mo><mn>0</mn><mo>)</mo></mrow><annotation>x[str[i]] = 1 + x.get(str[i], 0)</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">r</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]]</span><span class=\"mspace\"></span><span class=\"mrel\">=</span><span class=\"mspace\"></span></span><span class=\"base\"><span class=\"strut\"></span><span class=\"mord\">1</span><span class=\"mspace\"></span><span class=\"mbin\">+</span><span class=\"mspace\"></span></span><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">g</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">r</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mpunct\">,</span><span class=\"mspace\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo>[</mo><mi>s</mi><mi>t</mi><mi>r</mi><mo>[</mo><mn>0</mn><mo>]</mo><mo>]</mo></mrow><annotation>x[str[0]]</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">r</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]]</span></span></span></span>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo>[</mo><mi>\"</mi><mi>a</mi><mi>\"</mi><mo>]</mo></mrow><annotation>x[\"a\"]</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">[</span><span class=\"mord\">\"</span><span class=\"mord mathnormal\">a</span><span class=\"mord\">\"</span><span class=\"mclose\">]</span></span></span></span></li>\n</ul>\n</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn><mo>+</mo><mi>x</mi><mi>.</mi><mi>g</mi><mi>e</mi><mi>t</mi><mo>(</mo><mi>\"</mi><mi>a</mi><mi>\"</mi><mo>,</mo><mn>0</mn><mo>)</mo></mrow><annotation>1 + x.get(\"a\", 0)</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord\">1</span><span class=\"mspace\"></span><span class=\"mbin\">+</span><span class=\"mspace\"></span></span><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">g</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord\">\"</span><span class=\"mord mathnormal\">a</span><span class=\"mord\">\"</span><span class=\"mpunct\">,</span><span class=\"mspace\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span>\n<ul>\n<li>If there is a value associated with character \"a\" that exists, increment the value. Otherwise, initialize the value to 0.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>In short, the for or while loop is ensuring you are counting all the characters in the two strings. Once this is done, you want to return True if the hash maps are equal to each other.\n<ul>\n<li>So if you have two hash maps x and y:\n<ul>\n<li>Return True if x == y, else return False.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Time Complexity: O(n)</p>\n</li>\n<li>\n<p>Memory Complexity: O(n)</p>\n<ul>\n<li>Because we are using two hash maps for both strings.\n<ul>\n<li>O(n + n) reduces to O(n).</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">isAnagram</span>(<span class=\"hljs-params\">self, s: <span class=\"hljs-built_in\">str</span>, t: <span class=\"hljs-built_in\">str</span></span>) -> <span class=\"hljs-built_in\">bool</span>:\n        <span class=\"hljs-comment\"># All anagrams have strings of equal length</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(s) != <span class=\"hljs-built_in\">len</span>(t):\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n\n        <span class=\"hljs-comment\"># Initialize the two hash maps</span>\n        charS = {}\n        charT = {}\n        \n        <span class=\"hljs-string\">'''\n        Because s and t are the same length, \n        you can iterate from 0 to n - 1 \n        with either string\n        '''</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(s)):\n            <span class=\"hljs-string\">'''\n            Increment the character in the \n            hash map of s by 1.\n            Look up its current value or \n            start with 0 if it does not exist.\n            '''</span>\n            charS[s[i]] = <span class=\"hljs-number\">1</span> + charS.get(s[i], <span class=\"hljs-number\">0</span>)\n            <span class=\"hljs-string\">'''\n            Exact same process for the \n            character in the hash map of t.\n            '''</span>\n            charT[t[i]] = <span class=\"hljs-number\">1</span> + charT.get(t[i], <span class=\"hljs-number\">0</span>)\n        \n        <span class=\"hljs-string\">'''\n        Return True if the two tables \n        are identical, False otherwise\n        '''</span>\n        <span class=\"hljs-keyword\">return</span> charS == charT\n</code></pre>",
  "title": "Valid Anagram",
  "date": "March 3, 2025",
  "category": "Arrays",
  "categories": []
}