{
  "id": "trees/binarytreerightsideview",
  "contentHtml": "<h1>Binary Tree Right Side View</h1>\n<p>You are given the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi></mrow><annotation>root</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span></span></span></span> of a binary tree, and you have to return <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mi>o</mi><mi>d</mi><mi>e</mi><mi>s</mi></mrow><annotation>nodes</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">es</span></span></span></span> that are on the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mi>m</mi><mi>o</mi><mi>s</mi><mi>t</mi></mrow><annotation>rightmost</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">os</span><span class=\"mord mathnormal\">t</span></span></span></span> part of the tree.</p>\n<ul>\n<li>The nodes that if you were standing on the right side of the tree, you can point to.</li>\n</ul>\n<p><img src=\"/trees/binaryTreeRightSideView/BinaryTreeRightSideView1.svg\" alt=\"Image\"></p>\n<h2>How To Solve?</h2>\n<p>Why not just start at the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi></mrow><annotation>root</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span></span></span></span> node then search right, adding the nodes to an <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mi>r</mi><mi>r</mi><mi>a</mi><mi>y</mi></mrow><annotation>array</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">rr</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">y</span></span></span></span> or list.</p>\n<h3>Tree</h3>\n<p>Think of the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi></mrow><annotation>root</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span></span></span></span> node and its depth. <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>P</mi><mi>r</mi><mi>e</mi><mi>o</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi></mrow><annotation>Preorder</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">P</span><span class=\"mord mathnormal\">reor</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">er</span></span></span></span> traversal follows a <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo>−</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo>−</mo><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><annotation>root-left-right</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\"></span><span class=\"mbin\">−</span><span class=\"mspace\"></span></span><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">f</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\"></span><span class=\"mbin\">−</span><span class=\"mspace\"></span></span><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span></span></span></span> pattern, so why not implement the opposite?</p>\n<ul>\n<li>Start at the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi></mrow><annotation>root</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span></span></span></span> node.</li>\n<li>Go to the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><annotation>right</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span></span></span></span> node(s).</li>\n<li>Then go to the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow><annotation>left</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">f</span><span class=\"mord mathnormal\">t</span></span></span></span> node(s).</li>\n</ul>\n<p>Start at node 1, whose depth is 0.</p>\n<ul>\n<li>Add 1 to an empty <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi><mi>e</mi><mi>s</mi></mrow><annotation>res</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">res</span></span></span></span> array.</li>\n</ul>\n<p>Travel to node 3 whose depth is 1.</p>\n<ul>\n<li>Add 3 to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi><mi>e</mi><mi>s</mi></mrow><annotation>res</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">res</span></span></span></span>\n<ul>\n<li>Because <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mi>e</mi><mi>n</mi><mo>(</mo><mi>r</mi><mi>e</mi><mi>s</mi><mo>)</mo><mo>=</mo><mo>=</mo><mi>d</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi></mrow><annotation>len(res) == depth</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">res</span><span class=\"mclose\">)</span><span class=\"mspace\"></span><span class=\"mrel\">==</span><span class=\"mspace\"></span></span><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn><mo>=</mo><mo>=</mo><mn>1</mn></mrow><annotation>1 == 1</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord\">1</span><span class=\"mspace\"></span><span class=\"mrel\">==</span><span class=\"mspace\"></span></span><span class=\"base\"><span class=\"strut\"></span><span class=\"mord\">1</span></span></span></span></li>\n</ul>\n</li>\n</ul>\n<p>Travel to node 2 whose depth is 1.</p>\n<ul>\n<li>But now <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi><mi>e</mi><mi>s</mi><mo>=</mo><mo>[</mo><mn>1</mn><mo>,</mo><mn>3</mn><mo>]</mo></mrow><annotation>res = [1, 3]</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">res</span><span class=\"mspace\"></span><span class=\"mrel\">=</span><span class=\"mspace\"></span></span><span class=\"base\"><span class=\"strut\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\"></span><span class=\"mord\">3</span><span class=\"mclose\">]</span></span></span></span>\n<ul>\n<li>Don't add 2</li>\n</ul>\n</li>\n</ul>\n<p>Travel to node 5 whose depth is 2.</p>\n<ul>\n<li>Add 5 to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi><mi>e</mi><mi>s</mi></mrow><annotation>res</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">res</span></span></span></span>\n<ul>\n<li>Because <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mi>e</mi><mi>n</mi><mo>(</mo><mi>r</mi><mi>e</mi><mi>s</mi><mo>)</mo><mo>=</mo><mo>=</mo><mi>d</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi></mrow><annotation>len(res) == depth</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">res</span><span class=\"mclose\">)</span><span class=\"mspace\"></span><span class=\"mrel\">==</span><span class=\"mspace\"></span></span><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">pt</span><span class=\"mord mathnormal\">h</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn><mo>=</mo><mo>=</mo><mn>2</mn></mrow><annotation>2 == 2</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord\">2</span><span class=\"mspace\"></span><span class=\"mrel\">==</span><span class=\"mspace\"></span></span><span class=\"base\"><span class=\"strut\"></span><span class=\"mord\">2</span></span></span></span></li>\n</ul>\n</li>\n</ul>\n<p>Travel to node 4 whose depth is 2.</p>\n<ul>\n<li>But now <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi><mi>e</mi><mi>s</mi><mo>=</mo><mo>[</mo><mn>1</mn><mo>,</mo><mn>3</mn><mo>,</mo><mn>5</mn><mo>]</mo></mrow><annotation>res = [1, 3, 5]</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">res</span><span class=\"mspace\"></span><span class=\"mrel\">=</span><span class=\"mspace\"></span></span><span class=\"base\"><span class=\"strut\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\"></span><span class=\"mord\">5</span><span class=\"mclose\">]</span></span></span></span>\n<ul>\n<li>Don't add 5</li>\n</ul>\n</li>\n</ul>\n<p>I will include a visual below to demonstrate the DFS algorithm.</p>\n<p><img src=\"/trees/binaryTreeRightSideView/BinaryTreeRightSideView2.svg\" alt=\"Image\"></p>\n<h3>Tree Solution</h3>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># Definition for a binary tree node.</span>\n<span class=\"hljs-comment\"># class TreeNode:</span>\n<span class=\"hljs-comment\">#     def __init__(self, val=0, left=None, right=None):</span>\n<span class=\"hljs-comment\">#         self.val = val</span>\n<span class=\"hljs-comment\">#         self.left = left</span>\n<span class=\"hljs-comment\">#         self.right = right</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">rightSideView</span>(<span class=\"hljs-params\">self, root: <span class=\"hljs-type\">Optional</span>[TreeNode]</span>) -> <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]:\n        <span class=\"hljs-comment\"># Initialize a result array</span>\n        res = []\n\n        <span class=\"hljs-comment\"># Reverse Preorder DFS (Node, Right, Left)</span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dfs</span>(<span class=\"hljs-params\">root, depth</span>):\n            <span class=\"hljs-comment\"># Base case</span>\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> root:\n                <span class=\"hljs-keyword\">return</span>\n            <span class=\"hljs-comment\"># Append the rightmost nodes only</span>\n            <span class=\"hljs-keyword\">if</span> depth == <span class=\"hljs-built_in\">len</span>(res):\n                res.append(root.val)\n            \n            <span class=\"hljs-comment\"># Reverse Preorder DFS</span>\n            <span class=\"hljs-comment\"># Increment depth each level</span>\n            dfs(root.right, depth + <span class=\"hljs-number\">1</span>)\n            dfs(root.left, depth + <span class=\"hljs-number\">1</span>)\n\n        dfs(root, <span class=\"hljs-number\">0</span>)\n\n        <span class=\"hljs-keyword\">return</span> res\n</code></pre>",
  "title": "Binary Tree Right Side View",
  "date": "March 30, 2025",
  "category": "Trees",
  "categories": []
}