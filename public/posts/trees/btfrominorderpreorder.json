{
  "id": "trees/btfrominorderpreorder",
  "contentHtml": "<h1>Binary Tree From Inorder and Preorder Traversal</h1>\n<p>You are given two <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>r</mi><mi>r</mi><mi>a</mi><mi>y</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">arrays</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">rr</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">ys</span></span></span></span> for preorder and inorder traversal.</p>\n<p>You must return its <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mi>i</mi><mi>n</mi><mi>a</mi><mi>r</mi><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">binary</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">bina</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ry</span></span></span></span> tree.</p>\n<p><img src=\"/btFromInorderPreorder/BTFromInorderPreorder1.png\" alt=\"Image\"></p>\n<h2>How to Solve</h2>\n<p>Notice how the first index in preorder contains the root node.</p>\n<p>This gives a hint to solve the problem.</p>\n<p>This will help give us the intuition for building the recursive solution to the answer.</p>\n<h3>Tree</h3>\n<p>Set a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>i</mi><mi>d</mi><mi>d</mi><mi>l</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">middle</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">mi</span><span class=\"mord mathnormal\">dd</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span></span></span></span> pointer to the first index which is the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">root</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span></span></span></span> node.</p>\n<p>Find the root node in the inorder <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>r</mi><mi>r</mi><mi>a</mi><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">array</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">rr</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> that is given.</p>\n<p>From there, can you see that the entire <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">left</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">t</span></span></span></span> subtree is left of the middle?</p>\n<p>Can you also see that the entire <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">right</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span></span></span></span> subtree is right of the middle?</p>\n<p>Below, I will include a diagram that builds the tree.</p>\n<ul>\n<li>Hint: Use DFS.</li>\n</ul>\n<p><img src=\"/btFromInorderPreorder/BTFromInorderPreorder2.png\" alt=\"Image\"></p>\n<h3>Helpful Hints</h3>\n<ul>\n<li>Remember to validate the tree with preorder and inorder traversal.</li>\n<li>The problem uses DFS.\n<ul>\n<li>Preorder DFS (Root, Left, Right).</li>\n</ul>\n</li>\n</ul>\n<h3>Tree Solution</h3>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># Definition for a binary tree node.</span>\r\n<span class=\"hljs-comment\"># class TreeNode:</span>\r\n<span class=\"hljs-comment\">#     def __init__(self, val=0, left=None, right=None):</span>\r\n<span class=\"hljs-comment\">#         self.val = val</span>\r\n<span class=\"hljs-comment\">#         self.left = left</span>\r\n<span class=\"hljs-comment\">#         self.right = right</span>\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span>:\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">buildTree</span>(<span class=\"hljs-params\">self, preorder: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>], inorder: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]</span>) -> <span class=\"hljs-type\">Optional</span>[TreeNode]:\r\n        <span class=\"hljs-comment\"># Preorder or inorder is empty</span>\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> preorder <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">not</span> inorder:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n        \r\n        <span class=\"hljs-comment\"># Assign the root to the 1st index of preorder</span>\r\n        root = TreeNode(preorder[<span class=\"hljs-number\">0</span>])\r\n        <span class=\"hljs-comment\"># Find the middle index of the root in inorder</span>\r\n        mid = inorder.index(preorder[<span class=\"hljs-number\">0</span>])\r\n        <span class=\"hljs-comment\"># Left Preorder, Left Inorder</span>\r\n        root.left = <span class=\"hljs-variable language_\">self</span>.buildTree(preorder[<span class=\"hljs-number\">1</span>:mid+<span class=\"hljs-number\">1</span>], inorder[:mid])\r\n        <span class=\"hljs-comment\"># Right Preorder, Right Inorder</span>\r\n        root.right = <span class=\"hljs-variable language_\">self</span>.buildTree(preorder[mid+<span class=\"hljs-number\">1</span>:], inorder[mid+<span class=\"hljs-number\">1</span>:])\r\n\r\n        <span class=\"hljs-keyword\">return</span> root\n</code></pre>",
  "title": "Binary Tree From Inorder and Preorder Traversal",
  "date": "June 9th, 2025",
  "category": "Trees",
  "categories": []
}