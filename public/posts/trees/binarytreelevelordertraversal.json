{
  "id": "trees/binarytreelevelordertraversal",
  "contentHtml": "<h1>Binary Tree Level Order Traversal</h1>\n<p>You are given the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi></mrow><annotation>root</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span></span></span></span> of a binary tree and you must return the level order traversal of its nodes values.</p>\n<ul>\n<li>Left to right, level by level.</li>\n</ul>\n<p><img src=\"/trees/binaryTreeLevelOrderTraversal/BinaryTreeLevelOrderTraversal1.svg\"></p>\n<h2>How to Solve?</h2>\n<p>It is intuitive to understand how to solve this problem. We start by going <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow><annotation>left</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">t</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><annotation>right</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>u</mi><mi>p</mi></mrow><annotation>up</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">p</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mi>o</mi><mi>w</mi><mi>n</mi></mrow><annotation>down</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathnormal\">n</span></span></span></span>, like reading.</p>\n<h3>Tree</h3>\n<p>Imagine you are reading a book and the tree is a page in the book.</p>\n<p>The top line is going to read <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>3</mn></mrow><annotation>3</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span>. Then the next line is going to read <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>9</mn><mo>,</mo><mn>20</mn></mrow><annotation>9, 20</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">9</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">20</span></span></span></span> stemming from <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>3</mn></mrow><annotation>3</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span>.</p>\n<p>Imagine <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>9</mn></mrow><annotation>9</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">9</span></span></span></span> had children <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>3</mn></mrow><annotation>3</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>5</mn></mrow><annotation>5</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">5</span></span></span></span>. Then you read <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>3</mn><mo>,</mo><mn>5</mn><mo>,</mo><mn>15</mn><mo>,</mo><mn>7</mn></mrow><annotation>3, 5, 15, 7</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">5</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">15</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">7</span></span></span></span></p>\n<p>Breadth first search is really like reading a book.</p>\n<p>However, implementing its algorithm is quite difficult. You want to use a <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>q</mi><mi>u</mi><mi>e</mi><mi>u</mi><mi>e</mi></mrow><annotation>queue</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">e</span></span></span></span> which appends elements and removes them following a <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mi>I</mi><mi>F</mi><mi>O</mi></mrow><annotation>FIFO</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">FO</span></span></span></span> or first-in-first-out approach.</p>\n<p>Below, I will include an illustration demonstrating how to use <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi><mi>F</mi><mi>S</mi></mrow><annotation>BFS</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">BFS</span></span></span></span> and a <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>q</mi><mi>u</mi><mi>e</mi><mi>u</mi><mi>e</mi></mrow><annotation>queue</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">e</span></span></span></span> to solve this problem.</p>\n<p><img src=\"/trees/binaryTreeLevelOrderTraversal/BinaryTreeLevelOrderTraversal2.svg\"></p>\n<h3>Tree Solution</h3>\n<pre><code class=\"language-python\"><span class=\"hljs-comment\"># Definition for a binary tree node.</span>\n<span class=\"hljs-comment\"># class TreeNode:</span>\n<span class=\"hljs-comment\">#     def __init__(self, val=0, left=None, right=None):</span>\n<span class=\"hljs-comment\">#         self.val = val</span>\n<span class=\"hljs-comment\">#         self.left = left</span>\n<span class=\"hljs-comment\">#         self.right = right</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">levelOrder</span>(<span class=\"hljs-params\">self, root: <span class=\"hljs-type\">Optional</span>[TreeNode]</span>) -> <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]]:\n        <span class=\"hljs-comment\"># Create a result array</span>\n        res = []\n\n        <span class=\"hljs-comment\"># Create a queue</span>\n        q = deque()\n        <span class=\"hljs-comment\"># Append the root node to the queue</span>\n        q.append(root)\n\n        <span class=\"hljs-comment\"># Iterate through the queue until empty</span>\n        <span class=\"hljs-keyword\">while</span> q:\n            <span class=\"hljs-comment\"># Create an array for its level</span>\n            level = []\n            <span class=\"hljs-comment\"># What is the length of the queue?</span>\n            qLen = <span class=\"hljs-built_in\">len</span>(q)\n\n            <span class=\"hljs-comment\"># Iterate through the length of the queue</span>\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(qLen):\n                <span class=\"hljs-comment\"># Pop the level's node</span>\n                node = q.popleft()\n\n                <span class=\"hljs-comment\"># Get the node's children</span>\n                <span class=\"hljs-keyword\">if</span> node:\n                    <span class=\"hljs-comment\"># Add the node's value to the current level</span>\n                    level.append(node.val)\n                    <span class=\"hljs-comment\"># Append left child to queue</span>\n                    q.append(node.left)\n                    <span class=\"hljs-comment\"># Append right child to queue</span>\n                    q.append(node.right)\n\n            <span class=\"hljs-comment\"># Add level to the result array</span>\n            <span class=\"hljs-keyword\">if</span> level:\n                res.append(level)\n        \n        <span class=\"hljs-comment\"># Return the result array</span>\n        <span class=\"hljs-keyword\">return</span> res\n</code></pre>",
  "title": "Binary Tree Level Order Traversal",
  "date": "March 30, 2025",
  "category": "Trees",
  "categories": []
}