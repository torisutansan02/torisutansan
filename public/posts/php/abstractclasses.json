{
  "id": "php/abstractclasses",
  "contentHtml": "<h1>What are Abstract Classes and Methods?</h1>\n<p>When a parent class has a named method.</p>\n<ul>\n<li>But need its child class(es) to fill out tasks.</li>\n</ul>\n<p>An abstract class contains at least one abstract method.</p>\n<ul>\n<li>A method that is declared, but not implemented.</li>\n</ul>\n<p>When inheriting from a abstract class:</p>\n<ul>\n<li>Child class method must have the same name.</li>\n<li>Same or less restricted access.</li>\n<li>If protected: then either protected or public.</li>\n<li>The type and number of required arguments are the same.</li>\n<li>May have optional arguments.</li>\n</ul>\n<p>Rules:</p>\n<ul>\n<li>Child class method defined with the same name and it redeclared the parent abstract method.</li>\n<li>Must be defined with the same or less restricted access modifier.</li>\n<li>Required arguments must be the same. Child class may have optional arguments.</li>\n</ul>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\r\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\r\n\r\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\r\n<span class=\"hljs-meta\">&#x3C;?php\r\n    abstract class Food {\r\n        // Properties\r\n        public $name;\r\n\r\n        // Constructor\r\n        public function __construct($name) {\r\n            $this->name = $name;\r\n        }\r\n\r\n        // Methods\r\n        abstract public function intro(): string;\r\n    }\r\n\r\n    class Pizza extends Food {\r\n        public function intro(): string {\r\n            return \"$this->name is awesome!\";\r\n        }\r\n    }\r\n\r\n    class Pasta extends Food {\r\n        public function intro(): string {\r\n            return \"$this->name is awesome!\";\r\n        }\r\n    }\r\n\r\n    class Taco extends Food {\r\n        public function intro(): string {\r\n            return \"$this->name is awesome!\";\r\n        }\r\n    }\r\n\r\n    $pizza = new Pizza(\"Pizza\");\r\n    echo $pizza->intro();\r\n    echo \"&#x3C;br>\";\r\n\r\n    $pasta = new Pasta(\"Pasta\");\r\n    echo $pasta->intro();\r\n    echo \"&#x3C;br>\";\r\n\r\n    $taco = new Taco(\"Taco\");\r\n    echo $taco->intro();\r\n    echo \"&#x3C;br>\";\r\n?></span>\r\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\r\n\r\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<h2>Abstract Method as an Argument</h2>\n<p>An example:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\r\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\r\n\r\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\r\n<span class=\"hljs-meta\">&#x3C;?php\r\n    abstract class Car {\r\n        // Abstract Method\r\n        abstract protected function carMake($name);\r\n    }\r\n\r\n    class Make extends Car {\r\n        public function carMake($name) {\r\n            if ($name == \"Lexus\") {\r\n                $prefix = \"Expensive\";\r\n            }\r\n            elseif ($name == \"Honda\") {\r\n                $prefix = \"Slow\";\r\n            }\r\n            else {\r\n                $prefix = \"Affordable\";\r\n            }\r\n\r\n            return \"{$prefix} {$name}\";\r\n        }\r\n    }\r\n\r\n    $car = new Make;\r\n    echo $car->carMake(\"Lexus\");\r\n    echo \"&#x3C;br>\";\r\n    echo $car->carMake(\"Honda\");\r\n?></span>\r\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\r\n\r\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<p>Example where the abstract method has an argument.</p>\n<ul>\n<li>Child class has one additional argument.</li>\n</ul>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\r\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\r\n\r\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\r\n<span class=\"hljs-meta\">&#x3C;?php\r\n    abstract class Car {\r\n        // Abstract Method\r\n        abstract protected function carMake($name);\r\n    }\r\n\r\n    class Make extends Car {\r\n        public function carMake($name, $separator = \", \") {\r\n            if ($name == \"Lexus\") {\r\n                $prefix = \"2017\";\r\n            }\r\n            elseif ($name == \"Honda\") {\r\n                $prefix = \"2022\";\r\n            }\r\n            else {\r\n                $prefix = \"2023\";\r\n            }\r\n            return \"{$prefix} {$separator} {$name}\";\r\n        }\r\n    }\r\n\r\n    $car = new Make;\r\n    echo $car->carMake(\"Honda\");\r\n    echo \"&#x3C;br>\";\r\n    echo $car->carMake(\"Toyota\");\r\n?></span>\r\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\r\n\r\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>",
  "title": "Abstract Classes",
  "date": "July 12, 2025",
  "category": "PHP 7",
  "categories": []
}