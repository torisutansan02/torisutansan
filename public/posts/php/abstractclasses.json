{
  "id": "php/abstractclasses",
  "contentHtml": "<h1>What are Abstract Classes and Methods?</h1>\n<p>When a parent class has a named method.</p>\n<ul>\n<li>But need its child class(es) to fill out tasks.</li>\n</ul>\n<p>An abstract class contains at least one abstract method.</p>\n<ul>\n<li>A method that is declared, but not implemented.</li>\n</ul>\n<p>When inheriting from a abstract class:</p>\n<ul>\n<li>Child class method must have the same name.</li>\n<li>Same or less restricted access.</li>\n<li>If protected: then either protected or public.</li>\n<li>The type and number of required arguments are the same.</li>\n<li>May have optional arguments.</li>\n</ul>\n<p>Rules:</p>\n<ul>\n<li>Child class method defined with the same name and it redeclared the parent abstract method.</li>\n<li>Must be defined with the same or less restricted access modifier.</li>\n<li>Required arguments must be the same. Child class may have optional arguments.</li>\n</ul>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-meta\">&#x3C;?php\n    abstract class Food {\n        // Properties\n        public $name;\n\n        // Constructor\n        public function __construct($name) {\n            $this->name = $name;\n        }\n\n        // Methods\n        abstract public function intro(): string;\n    }\n\n    class Pizza extends Food {\n        public function intro(): string {\n            return \"$this->name is awesome!\";\n        }\n    }\n\n    class Pasta extends Food {\n        public function intro(): string {\n            return \"$this->name is awesome!\";\n        }\n    }\n\n    class Taco extends Food {\n        public function intro(): string {\n            return \"$this->name is awesome!\";\n        }\n    }\n\n    $pizza = new Pizza(\"Pizza\");\n    echo $pizza->intro();\n    echo \"&#x3C;br>\";\n\n    $pasta = new Pasta(\"Pasta\");\n    echo $pasta->intro();\n    echo \"&#x3C;br>\";\n\n    $taco = new Taco(\"Taco\");\n    echo $taco->intro();\n    echo \"&#x3C;br>\";\n?></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<h2>Abstract Method as an Argument</h2>\n<p>An example:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-meta\">&#x3C;?php\n    abstract class Car {\n        // Abstract Method\n        abstract protected function carMake($name);\n    }\n\n    class Make extends Car {\n        public function carMake($name) {\n            if ($name == \"Lexus\") {\n                $prefix = \"Expensive\";\n            }\n            elseif ($name == \"Honda\") {\n                $prefix = \"Slow\";\n            }\n            else {\n                $prefix = \"Affordable\";\n            }\n\n            return \"{$prefix} {$name}\";\n        }\n    }\n\n    $car = new Make;\n    echo $car->carMake(\"Lexus\");\n    echo \"&#x3C;br>\";\n    echo $car->carMake(\"Honda\");\n?></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<p>Example where the abstract method has an argument.</p>\n<ul>\n<li>Child class has one additional argument.</li>\n</ul>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-meta\">&#x3C;?php\n    abstract class Car {\n        // Abstract Method\n        abstract protected function carMake($name);\n    }\n\n    class Make extends Car {\n        public function carMake($name, $separator = \", \") {\n            if ($name == \"Lexus\") {\n                $prefix = \"2017\";\n            }\n            elseif ($name == \"Honda\") {\n                $prefix = \"2022\";\n            }\n            else {\n                $prefix = \"2023\";\n            }\n            return \"{$prefix} {$separator} {$name}\";\n        }\n    }\n\n    $car = new Make;\n    echo $car->carMake(\"Honda\");\n    echo \"&#x3C;br>\";\n    echo $car->carMake(\"Toyota\");\n?></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>",
  "title": "Abstract Classes",
  "date": "July 12, 2025",
  "category": "PHP 7",
  "categories": []
}