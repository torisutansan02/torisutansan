{
  "id": "php/iterables",
  "contentHtml": "<h1>What is an Iterable?</h1>\n<p>Any value which can be looped in a foreach() loop.</p>\n<ul>\n<li>Iterable pseudotype introducted in PHP 7.1.\n<ul>\n<li>Used as a data type for function arguments and function return values.</li>\n</ul>\n</li>\n</ul>\n<h2>Using Iterables</h2>\n<p>Used as a data type of a function argument or as the return type.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\r\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\r\n\r\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\r\n<span class=\"hljs-meta\">&#x3C;?php\r\n    function test(iterable $foods) {\r\n        foreach($foods as $food) {\r\n            echo $food;\r\n        }\r\n    }\r\n\r\n    $foods = [\r\n        \"Banana\",\r\n        \"Potato\",\r\n        \"Tomato\"\r\n    ];\r\n\r\n    test($foods);\r\n?></span>\r\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\r\n\r\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<p>Returning an iterable.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\r\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\r\n\r\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\r\n<span class=\"hljs-meta\">&#x3C;?php\r\n    function getFoods():iterable {\r\n        return [\"Squash\", \"Potato\", \"Tomato\"];\r\n    }\r\n\r\n    $foods = getFoods();\r\n    foreach($foods as $food) {\r\n        echo $food;\r\n    }\r\n?></span>\r\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\r\n\r\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<h2>Creating Iterables</h2>\n<p>Arrays</p>\n<ul>\n<li>All arrays are iterables.</li>\n<li>Can be used as an argument of a function that requires an iterable.</li>\n</ul>\n<p>Iterators</p>\n<ul>\n<li>Objects implement the Iterator interface that can be used as an argument of a function.\n<ul>\n<li>Requires an iterable.</li>\n</ul>\n</li>\n<li>Contains a list of items and provides methods to loop through.\n<ul>\n<li>Keeps a pointer to one of the elements in a list.</li>\n<li>Must have a key which can be used.</li>\n</ul>\n</li>\n</ul>\n<p>Iterators have these methods:</p>\n<ul>\n<li>current()\n<ul>\n<li>Returns element that the pointer is pointint to.</li>\n<li>Any data type.</li>\n</ul>\n</li>\n<li>key()\n<ul>\n<li>Returns key associated with the current element.</li>\n<li>Can be an integer, float, boolean, or string.</li>\n</ul>\n</li>\n<li>next()\n<ul>\n<li>Moves the pointer to the next element.</li>\n</ul>\n</li>\n<li>rewind()\n<ul>\n<li>Moves pointer to the first element.</li>\n</ul>\n</li>\n<li>valid()\n<ul>\n<li>If internal pointer not pointing to any element:\n<ul>\n<li>Returns false.</li>\n<li>Returns true otherwise.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\r\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\r\n\r\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\r\n<span class=\"hljs-meta\">&#x3C;?php\r\n// Create an Iterator\r\nclass MyIterator implements Iterator {\r\n  private $items = [];\r\n  private $pointer = 0;\r\n\r\n  public function __construct($items) {\r\n    // array_values() makes sure that the keys are numbers\r\n    $this->items = array_values($items);\r\n  }\r\n\r\n  public function current() {\r\n    return $this->items[$this->pointer];\r\n  }\r\n\r\n  public function key() {\r\n    return $this->pointer;\r\n  }\r\n\r\n  public function next() {\r\n    $this->pointer++;\r\n  }\r\n\r\n  public function rewind() {\r\n    $this->pointer = 0;\r\n  }\r\n\r\n  public function valid() {\r\n    // count() indicates how many items are in the list\r\n    return $this->pointer &#x3C; count($this->items);\r\n  }\r\n}\r\n\r\n// A function that uses iterables\r\nfunction printIterable(iterable $myIterable) {\r\n  foreach($myIterable as $item) {\r\n    echo $item;\r\n  }\r\n}\r\n\r\n// Use the iterator as an iterable\r\n$iterator = new MyIterator([\"a\", \"b\", \"c\"]);\r\nprintIterable($iterator);\r\n?></span>\r\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\r\n\r\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>",
  "title": "Iterables",
  "date": "July 13, 2025",
  "category": "PHP 7",
  "categories": []
}