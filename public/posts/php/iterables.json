{
  "id": "php/iterables",
  "contentHtml": "<h1>What is an Iterable?</h1>\n<p>Any value which can be looped in a foreach() loop.</p>\n<ul>\n<li>Iterable pseudotype introducted in PHP 7.1.\n<ul>\n<li>Used as a data type for function arguments and function return values.</li>\n</ul>\n</li>\n</ul>\n<h2>Using Iterables</h2>\n<p>Used as a data type of a function argument or as the return type.</p>\n<pre><code class=\"language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-meta\">&#x3C;?php\n    function test(iterable $foods) {\n        foreach($foods as $food) {\n            echo $food;\n        }\n    }\n\n    $foods = [\n        \"Banana\",\n        \"Potato\",\n        \"Tomato\"\n    ];\n\n    test($foods);\n?></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<p>Returning an iterable.</p>\n<pre><code class=\"language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-meta\">&#x3C;?php\n    function getFoods():iterable {\n        return [\"Squash\", \"Potato\", \"Tomato\"];\n    }\n\n    $foods = getFoods();\n    foreach($foods as $food) {\n        echo $food;\n    }\n?></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<h2>Creating Iterables</h2>\n<p>Arrays</p>\n<ul>\n<li>All arrays are iterables.</li>\n<li>Can be used as an argument of a function that requires an iterable.</li>\n</ul>\n<p>Iterators</p>\n<ul>\n<li>Objects implement the Iterator interface that can be used as an argument of a function.\n<ul>\n<li>Requires an iterable.</li>\n</ul>\n</li>\n<li>Contains a list of items and provides methods to loop through.\n<ul>\n<li>Keeps a pointer to one of the elements in a list.</li>\n<li>Must have a key which can be used.</li>\n</ul>\n</li>\n</ul>\n<p>Iterators have these methods:</p>\n<ul>\n<li>current()\n<ul>\n<li>Returns element that the pointer is pointint to.</li>\n<li>Any data type.</li>\n</ul>\n</li>\n<li>key()\n<ul>\n<li>Returns key associated with the current element.</li>\n<li>Can be an integer, float, boolean, or string.</li>\n</ul>\n</li>\n<li>next()\n<ul>\n<li>Moves the pointer to the next element.</li>\n</ul>\n</li>\n<li>rewind()\n<ul>\n<li>Moves pointer to the first element.</li>\n</ul>\n</li>\n<li>valid()\n<ul>\n<li>If internal pointer not pointing to any element:\n<ul>\n<li>Returns false.</li>\n<li>Returns true otherwise.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-meta\">&#x3C;?php\n// Create an Iterator\nclass MyIterator implements Iterator {\n  private $items = [];\n  private $pointer = 0;\n\n  public function __construct($items) {\n    // array_values() makes sure that the keys are numbers\n    $this->items = array_values($items);\n  }\n\n  public function current() {\n    return $this->items[$this->pointer];\n  }\n\n  public function key() {\n    return $this->pointer;\n  }\n\n  public function next() {\n    $this->pointer++;\n  }\n\n  public function rewind() {\n    $this->pointer = 0;\n  }\n\n  public function valid() {\n    // count() indicates how many items are in the list\n    return $this->pointer &#x3C; count($this->items);\n  }\n}\n\n// A function that uses iterables\nfunction printIterable(iterable $myIterable) {\n  foreach($myIterable as $item) {\n    echo $item;\n  }\n}\n\n// Use the iterator as an iterable\n$iterator = new MyIterator([\"a\", \"b\", \"c\"]);\nprintIterable($iterator);\n?></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>",
  "title": "Iterables",
  "date": "July 13, 2025",
  "category": "PHP 7",
  "categories": []
}