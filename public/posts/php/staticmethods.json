{
  "id": "php/staticmethods",
  "contentHtml": "<h1>What are Static Methods?</h1>\n<p>Can be called directly.</p>\n<ul>\n<li>Without creating an instance of the class.</li>\n<li>Use the double colon in between the class name and method name.</li>\n</ul>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\r\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\r\n\r\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\r\n<span class=\"hljs-meta\">&#x3C;?php\r\n    class Hello {\r\n        public static function hi() {\r\n            return \"Hi, Tristan!\";\r\n        }\r\n    }\r\n\r\n    echo Hello::hi();\r\n?></span>\r\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\r\n\r\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<h2>More on Static Methods</h2>\n<p>Classes can have static and non-static methods.</p>\n<ul>\n<li>Static method can be accessed from a method in the same class.\n<ul>\n<li>Use the self keyword.</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\r\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\r\n\r\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\r\n<span class=\"hljs-meta\">&#x3C;?php\r\n    class Hello {\r\n        public static function hi() {\r\n            echo \"Hi, Tristan!\";\r\n        }\r\n\r\n        public function __construct() {\r\n            self::hi();\r\n        }\r\n    }\r\n\r\n    new Hello();\r\n?></span>\r\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\r\n\r\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<p>Static methods can be called from methods in other classes.</p>\n<ul>\n<li>The static method should be public.</li>\n</ul>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\r\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\r\n\r\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\r\n<span class=\"hljs-meta\">&#x3C;?php\r\n    class A {\r\n        public static function msg1() {\r\n            echo \"Hi, Tristan!\";\r\n        }\r\n    }\r\n\r\n    class B {\r\n        public function message() {\r\n            A::msg1();\r\n        }\r\n    }\r\n\r\n    $tristan = new B();\r\n    echo $tristan->message();\r\n?></span>\r\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\r\n\r\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<p>You can use the parent keyword inside a child class.</p>\n<ul>\n<li>Static methods can be public or protected.</li>\n</ul>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\r\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\r\n\r\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\r\n<span class=\"hljs-meta\">&#x3C;?php\r\n    class domain {\r\n        protected static function tristanWebsite() {\r\n            return \"&#x3C;a href='https://torisutan.org'>Website&#x3C;/a>\";\r\n        }\r\n    }\r\n\r\n    class torisutan extends domain {\r\n        public $webName;\r\n\r\n        public function __construct() {\r\n            $this->webName = parent::tristanWebsite();\r\n        }\r\n    }\r\n\r\n    $website = new torisutan;\r\n    echo $website->webName;\r\n?></span>\r\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\r\n\r\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>",
  "title": "Static Methods",
  "date": "July 12, 2025",
  "category": "PHP 7",
  "categories": []
}