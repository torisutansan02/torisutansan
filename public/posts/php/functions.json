{
  "id": "php/functions",
  "contentHtml": "<h1>Functions</h1>\n<p>There are built-in functions or you can create custom ones.</p>\n<h2>User-Defined Functions</h2>\n<ul>\n<li>A function is a block statement that can be used repeatedly in a program.</li>\n<li>Will not execute automatically.</li>\n<li>Must be called to execute.</li>\n</ul>\n<h2>Creating and Calling a Function</h2>\n<p>Use the keyword function followed by the function name.</p>\n<ul>\n<li>Call the function outside of the function.</li>\n<li>They are not case-sensitive.</li>\n<li>Use curly braces to define the code block.</li>\n</ul>\n<pre><code class=\"language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-meta\">&#x3C;?php\n    function message() {\n        echo \"Hi, there!\";\n    }\n    message();\n?></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<h2>Function Arguments</h2>\n<p>Functions can pass in parameters as arguments.</p>\n<ul>\n<li>You can add one or more.</li>\n<li>Separated by a comma.</li>\n</ul>\n<pre><code class=\"language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-meta\">&#x3C;?php\n    function message($name, $year) {\n        echo \"$name: $year\";\n    }\n    message(\"Tristan\", 2002);\n?></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<h2>Default Argument Value</h2>\n<p>You can set a default parameter in a function.</p>\n<ul>\n<li>Passing an argument overrides the default parameter.</li>\n</ul>\n<pre><code class=\"language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-meta\">&#x3C;?php\n    function area($width = 8, $height = 8) {\n        return $width * $height;\n    }\n\n    print(area(16, 16));\n    print \"&#x3C;br>\";\n    print(area());\n?></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<h2>Returning Values</h2>\n<p>You can use the return statement to return a value in a function.</p>\n<pre><code class=\"language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-meta\">&#x3C;?php\n    function sum($x, $y) {\n        $z = $x + $y;\n        return $z;\n    }\n\n    print(sum(15, 3));\n    print \"&#x3C;br>\";\n    print(sum(2, 5));\n    print \"&#x3C;br>\";\n?></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<h2>Pass Arguments by Reference</h2>\n<p>By default, functions pass arguments by value.</p>\n<ul>\n<li>The function does not change the value.</li>\n</ul>\n<p>However, you can change the input value by reference.</p>\n<ul>\n<li>&#x26; operator.</li>\n</ul>\n<pre><code class=\"language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-meta\">&#x3C;?php\n    function subtract(&#x26;$val) {\n        $val -= 2;\n        return $val;\n    }\n    $num = 2;\n    print(subtract($num));\n    echo $num;\n?></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<h2>Variable Number of Arguments</h2>\n<p>You can have an unknown amount of arguments in the function parameter.</p>\n<ul>\n<li>Known as a variadic function.</li>\n<li>Variadic function becomes an array.</li>\n</ul>\n<pre><code class=\"language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-meta\">&#x3C;?php\n    function addNumbers(...$val) {\n        $sumVal = 0;\n        $len = count($val);\n        for ($i = 0; $i &#x3C; len; $i++) {\n            $sumVal += $val[$i];\n        }\n        return $sumVal;\n    }\n\n    print(addNumbers(4, 2, 2, 1, 2, 3));\n?></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<p>You can have just one argument at variable length, it must be the last parameter.</p>\n<pre><code class=\"language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-meta\">&#x3C;?php\n    function sumThree($three, ...$val) {\n        $sumVal = 0;\n        $len = count($val);\n\n        for ($i = 0; $i &#x3C; $len; $i++) {\n            $sumVal += $val[$i] + $three;\n        }\n        \n        return $sumVal;\n    }\n\n    echo(sumThree(3, 7, 17, 27));\n?></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<h2>PHP is Loosely Typed</h2>\n<p>We do not have to tell PHP what data type a variable is.</p>\n<ul>\n<li>You can do things like add a integer and string.\n<ul>\n<li>Not recommended.</li>\n</ul>\n</li>\n<li>Type declarations added in PHP 7.</li>\n<li>use the strict declaration to throw a fatal error if a data type mismatches.</li>\n</ul>\n<pre><code class=\"language-php\"><span class=\"hljs-meta\">&#x3C;?php</span> <span class=\"hljs-keyword\">declare</span>(strict_types=<span class=\"hljs-number\">1</span>);\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$a</span>, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$b</span></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$a</span> + <span class=\"hljs-variable\">$b</span>;\n}\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">sum</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-string\">\"5\"</span>);\n\n<span class=\"hljs-meta\">?></span>\n</code></pre>\n<h2>Return Type Declarations</h2>\n<p>PHP allows us to use type declarations for the return statement.</p>\n<ul>\n<li>Enable the strict requirement.</li>\n<li>Use a : after the function and then write the type.</li>\n</ul>\n<pre><code class=\"language-php\"><span class=\"hljs-meta\">&#x3C;?php</span> <span class=\"hljs-keyword\">declare</span>(strict_types=<span class=\"hljs-number\">1</span>);\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">float</span> <span class=\"hljs-variable\">$a</span>, <span class=\"hljs-keyword\">float</span> <span class=\"hljs-variable\">$b</span></span>) : <span class=\"hljs-title\">float</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$a</span> + <span class=\"hljs-variable\">$b</span>;\n}\n\n<span class=\"hljs-keyword\">echo</span> <span class=\"hljs-title function_ invoke__\">sum</span>(<span class=\"hljs-number\">5.2</span>, <span class=\"hljs-number\">3.3</span>);\n\n<span class=\"hljs-meta\">?></span>\n</code></pre>\n<p>You can specify a different return type than the argument types.</p>\n<ul>\n<li>But ensure the return value is the correct type.</li>\n</ul>\n<pre><code class=\"language-php\"><span class=\"hljs-meta\">&#x3C;?php</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$a</span>, <span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$b</span></span>) : <span class=\"hljs-title\">float</span> </span>{\n    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">float</span>)(<span class=\"hljs-variable\">$a</span> + <span class=\"hljs-variable\">$b</span>);\n}\n<span class=\"hljs-keyword\">echo</span>(<span class=\"hljs-title function_ invoke__\">sum</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>));\n<span class=\"hljs-meta\">?></span>\n</code></pre>",
  "title": "Functions",
  "date": "July 12, 2025",
  "category": "PHP 7",
  "categories": []
}