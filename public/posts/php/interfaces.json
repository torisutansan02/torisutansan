{
  "id": "php/interfaces",
  "contentHtml": "<h1>What are Interfaces?</h1>\n<p>Allows us to specify what methods a class should implement.</p>\n<ul>\n<li>One or more classes using the same interface is polymorphism.</li>\n<li>Declared with the interface keyword.</li>\n</ul>\n<h2>Interfaces vs. Abstract Classes</h2>\n<p>Similar to abstract classes. Differences are:</p>\n<ul>\n<li>Interfaces cannot have properties, abstract classes can.</li>\n<li>Methods must be public.\n<ul>\n<li>Abstract methods can be public or protected.</li>\n</ul>\n</li>\n<li>Methods in an interface are abstract.\n<ul>\n<li>Cannot be implemented in code and abstract keyword is unnecessary.</li>\n</ul>\n</li>\n<li>Classes can implement an interface while inheriting from another class.</li>\n</ul>\n<h2>Using Interfaces</h2>\n<ul>\n<li>Use the implements keyword\n<ul>\n<li>Must implement all of the interface's methods.</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-meta\">&#x3C;?php\n    interface Animal {\n        public function makeSound();\n    }\n\n    class Cat implements Animal {\n        public function makeSound() {\n            return \"Meow!\";\n        }\n    }\n\n    class Dog implements Animal {\n        public function makeSound() {\n            return \"Woof!\";\n        }\n    }\n\n    class Bird implements Animal {\n        public function makeSound() {\n            return \"Chirp!\";\n        }\n    }\n\n    $cat = new Cat();\n    echo $cat->makeSound();\n\n    $dog = new Dog();\n    echo $dog->makeSound();\n\n    $bird = new Bird();\n    echo $bird->makeSound();\n?></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<p>The above example uses polymorphism.</p>\n<ul>\n<li>One abstract class or interface is used by multiple classes.</li>\n</ul>\n<p>Let's use a loop to simplify the code and make it more readable.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-meta\">&#x3C;?php\n    interface Animal {\n        public function makeSound();\n    }\n\n    class Cat implements Animal {\n        public function makeSound() {\n            return \"Meow!\";\n        }\n    }\n\n    class Dog implements Animal {\n        public function makeSound() {\n            return \"Woof!\";\n        }\n    }\n\n    class Bird implements Animal {\n        public function makeSound() {\n            return \"Chirp!\";\n        }\n    }\n\n    $cat = new Cat();\n    $dog = new Dog();\n    $bird = new Bird();\n\n    $animals = [\n        $cat,\n        $dog,\n        $bird\n    ];\n\n    foreach ($animals as $animal) {\n        echo $animal->makeSound();\n    }\n?></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>",
  "title": "Interfaces",
  "date": "July 12, 2025",
  "category": "PHP 7",
  "categories": []
}