{
  "id": "php/operators",
  "contentHtml": "<h1>PHP Operators</h1>\n<p>Used to perform operations on variables and values.</p>\n<p>Divided into multiple groups:</p>\n<ul>\n<li>Arithmetic.</li>\n<li>Assignment.</li>\n<li>Comparison.</li>\n<li>Increment/Decrement.</li>\n<li>Logical.</li>\n<li>String.</li>\n<li>Array.</li>\n<li>Conditional Assignments.</li>\n</ul>\n<h2>Arithmetic</h2>\n<p>Used with numerical operatiosn to perform common arithmetical operations.</p>\n<pre><code>+\nAddition.\n$x + $y\nSum of $x and $y\n\n-\nSubtraction.\n$x - $y\nDifference of $x and $y\n\n*\nMultiplication.\n$x * $y\nProduct of $x and $y\n\n/\nDivision.\n$x / $y\nQuotient of $x and $y\n\n%\nModulo.\n$x % $y\nRemainder of $x divided by $y\n\n**\nExponentiation.\n$x ** $y\nResult of raising $x to the $y'th power.\n</code></pre>\n<h2>Assignments</h2>\n<p>Used with numeric values to write a value to a variable.</p>\n<ul>\n<li>Basic operator is '='. The left operand is assigned to the value of the expression on the right.</li>\n</ul>\n<pre><code>x = y\nSame as x = y\nLeft operand assigned value of the expression on the right\n\nx += y\nx = x + y\nAddition\n\nx -= y\nx = x - y\nSubtraction\n\nx *= y\nx = x * y\nMultiplication\n\nx /= y\nx = x / y\nDivision\n\nx %= y\nx = x % y\nModulus\n</code></pre>\n<h2>Comparison</h2>\n<p>Used to compare two values (number or string).</p>\n<pre><code>==\nEqual\n$x == $y\nReturn true if $x is equal to $y\n\n===\nIdentical\n$x === $y\nReturns true if $x is equal to $y, and they are the same type\n\n!=\nNot equal\n$x != $y\nReturns true is $x is not equal to $y\n\n&#x3C;>\nNot equal\n$x &#x3C;> $y\nReturns true if $x is not equal to $y\n\n!==\nNot identical\n$x !== $y\nReturns true if $x is not equal to $y, or they are not the same type\n\n>\nGreater than\n$x > $y\nReturns true if $x is greater than $y\n\n&#x3C;\nLess than\n$x &#x3C; $y\nReturns true if $x is less than $y\n\n>=\nGreater than or equal to\n$x >= $y\nReturns true if $x is greater than or equal to $y\n\n&#x3C;=\nLess than or equal to\n$x &#x3C;= $y\nReturns true if $x is less than or equal to $y\n\n&#x3C;=>\nSpaceship\n$x &#x3C;=> $y\nReturns an integer less than, equal to, or greater than zero, depending on if $x is less than, equal to, or greater than $y.\n</code></pre>\n<h2>Increment / Decrement</h2>\n<p>Used to increment or decrement a variable's value.</p>\n<pre><code>++$x\nPre-increment\nIncrements $x by one, then returns $x\n\n$x++\nPost-increment\nReturns $x, then increments $x by one\n\n--$x\nPre-decrement\nDecrements $x by one, then returns $x\n\n$x--\nPost-decrement\nReturns $x, then decrements $x by one\n</code></pre>\n<h2>Logical Operators</h2>\n<p>Used to combine conditional statements</p>\n<pre><code>and\nAnd\n$x and $y\nTrue if both $x and $y are true\n\nor\nOr\n$x or $y\nTrue if either $x or $y are true\n\nxor\nXor\n$x xor $y\nTrue if either $x or $y is true, not both\n\n&#x26;&#x26;\nAnd\n$x &#x26;&#x26; $y\nTrue if both $x and $y are true\n\n||\nOr\n$x || $y\nTrue if either $x or $y are true\n\n!\nNot\n!$x\nTrue if $x is not true\n</code></pre>\n<h2>String Operators</h2>\n<p>These operators are designed for concatenation of strings</p>\n<pre><code>.\nConcatenation\n$msg1 . $msg2\nConcatenation of $msg1 and $msg2\n\n.=\nConcatenation Assignment\n$msg1 . $msg2\nAppens $msg1 to $msg2\n</code></pre>\n<h2>Array Operators</h2>\n<p>Used to compare arrays.</p>\n<pre><code>+\nUnion\n$x + $y\nUnion of $x and $y\n\n==\nEquality\n$x == $y\nReturns true if $x and $y have the same key/value pairs\n\n===\nIdentity\n$x == $y\nReturns true if $x and $y have the same key/value pairs in the same order and of the same types\n\n!=\nInequality\n$x != $y\nReturns true if $x is not equal to $y\n\n&#x3C;>\nInequality\n$x &#x3C;> $y\nReturns true if $x is not equal to $y\n\n!==\nNon-identity\nReturns true if $x is not identicaly $y\n</code></pre>\n<h2>Conditional Assignment Operators</h2>\n<p>Used to set a value depending on conditions.</p>\n<pre><code>?:\nTernary\n$x = expr1 ? expr2 : expr3\nReturns the value of $x\n$x becomes expr2 if expr1 is true\n$x becomes expr3 if expr1 is false\n\n??\nNull Coalescing\n$x = expr1 ?? expr2\nReturns the value of $x\n$x is expr1 if expr1 exists, and not null.\n$x becomes expr2 otherwise\n</code></pre>",
  "title": "PHP Operators",
  "date": "July 12, 2025",
  "category": "PHP 7",
  "categories": []
}