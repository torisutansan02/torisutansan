{
  "id": "singlylinkedlists",
  "contentHtml": "<h1>Singly Linked List</h1>\n<p>Consider this more of a cheat sheet than a guide.</p>\n<p>Below, I will include common operations to implement a Linked List. I am also going to link a repository with OOP principles to run Linked List operations.</p>\n<p><a href=\"https://github.com/torisutansan02/Implementing-Data-Structures-and-Algorithms/tree/main/Linked%20Lists\">Linked Lists</a></p>\n<h2>Visual Cheat Sheet</h2>\n<p>Below, I will include visuals based on the level of difficult for the implementation.</p>\n<p>Each level should represent a day where you spend studying its implementation.</p>\n<p>I cannot guarantee that you will become a master at linked lists after this, but you will certainly be better.</p>\n<h3>Linked List Implementation</h3>\n<p>Below are the operations to create a functional linked list.</p>\n<ul>\n<li>Bonus:\n<ul>\n<li>Add pop()</li>\n<li>Add popfront()</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/linkedLists/LinkedList1.png\" alt=\"Singly Linked List\" width=\"728\" height=\"3927\"></p>\n<ul>\n<li>get() implementation.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\">self, index</span>):\r\n    <span class=\"hljs-keyword\">if</span> index < <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> index >= <span class=\"hljs-variable language_\">self</span>.size:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n    \r\n    curr = <span class=\"hljs-variable language_\">self</span>.head\r\n\r\n    i = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">while</span> i < index:\r\n        curr = curr.<span class=\"hljs-built_in\">next</span>\r\n        i += <span class=\"hljs-number\">1</span>\r\n    \r\n    <span class=\"hljs-keyword\">return</span> curr.val\n</code></pre>\n<ul>\n<li>append() implementation.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">append</span>(<span class=\"hljs-params\">self, val</span>):\r\n    value = Node(val)\r\n\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-variable language_\">self</span>.head:\r\n        <span class=\"hljs-variable language_\">self</span>.head = value\r\n        <span class=\"hljs-variable language_\">self</span>.size += <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">return</span>\r\n    \r\n    curr = <span class=\"hljs-variable language_\">self</span>.head\r\n    <span class=\"hljs-keyword\">while</span> curr.<span class=\"hljs-built_in\">next</span>:\r\n        curr = curr.<span class=\"hljs-built_in\">next</span>\r\n    \r\n    curr.<span class=\"hljs-built_in\">next</span> = value\r\n    <span class=\"hljs-variable language_\">self</span>.size += <span class=\"hljs-number\">1</span>\n</code></pre>\n<ul>\n<li>prepend() implementation.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">prepend</span>(<span class=\"hljs-params\">self, val</span>):\r\n    value = Node(val)\r\n    value.<span class=\"hljs-built_in\">next</span> = <span class=\"hljs-variable language_\">self</span>.head\r\n    <span class=\"hljs-variable language_\">self</span>.head = value\r\n    <span class=\"hljs-variable language_\">self</span>.size += <span class=\"hljs-number\">1</span>\n</code></pre>\n<ul>\n<li>insert() implementation.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-params\">self, index, val</span>):\r\n    <span class=\"hljs-keyword\">if</span> index < <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> index > <span class=\"hljs-variable language_\">self</span>.size:\r\n        <span class=\"hljs-keyword\">return</span>\r\n    \r\n    <span class=\"hljs-keyword\">if</span> index == <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-variable language_\">self</span>.prepend(val)\r\n        <span class=\"hljs-keyword\">return</span>\r\n\r\n    value = Node(val)\r\n    \r\n    curr = <span class=\"hljs-variable language_\">self</span>.head\r\n\r\n    i = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">while</span> i < index - <span class=\"hljs-number\">1</span>:\r\n        curr = curr.<span class=\"hljs-built_in\">next</span>\r\n        i += <span class=\"hljs-number\">1</span>\r\n\r\n    value.<span class=\"hljs-built_in\">next</span> = curr.<span class=\"hljs-built_in\">next</span>\r\n    curr.<span class=\"hljs-built_in\">next</span> = value\r\n    <span class=\"hljs-variable language_\">self</span>.size += <span class=\"hljs-number\">1</span>\n</code></pre>\n<ul>\n<li>delete() implementation</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-params\">self, index</span>):\r\n    <span class=\"hljs-keyword\">if</span> index < <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> index >= <span class=\"hljs-variable language_\">self</span>.size:\r\n        <span class=\"hljs-keyword\">return</span>\r\n    <span class=\"hljs-keyword\">if</span> index == <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-variable language_\">self</span>.head = <span class=\"hljs-variable language_\">self</span>.head.<span class=\"hljs-built_in\">next</span>\r\n        <span class=\"hljs-variable language_\">self</span>.size -= <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">return</span>\r\n    curr = <span class=\"hljs-variable language_\">self</span>.head\r\n    i = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">while</span> i < index - <span class=\"hljs-number\">1</span>:\r\n        curr = curr.<span class=\"hljs-built_in\">next</span>\r\n        i += <span class=\"hljs-number\">1</span>\r\n    curr.<span class=\"hljs-built_in\">next</span> = curr.<span class=\"hljs-built_in\">next</span>.<span class=\"hljs-built_in\">next</span>\r\n    <span class=\"hljs-variable language_\">self</span>.size -= <span class=\"hljs-number\">1</span>\n</code></pre>\n<h3>Reverse, Find Middle, Find Cycle</h3>\n<p>Below are the basic operations for solving LeetCode questions.</p>\n<p>These are easy problems to solve on LeetCode and are the fundamentals for more difficult problems.</p>\n<p><img src=\"/linkedLists/LinkedList2.png\" alt=\"Singly Linked List\" width=\"820\" height=\"4760\"></p>\n<ul>\n<li>reverseList() implementation.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">reverseList</span>(<span class=\"hljs-params\">self, head</span>):\r\n    prev = <span class=\"hljs-literal\">None</span>\r\n    curr = head\r\n    <span class=\"hljs-keyword\">while</span> curr:\r\n        nxt = curr.<span class=\"hljs-built_in\">next</span>\r\n        curr.<span class=\"hljs-built_in\">next</span> = prev\r\n        prev = curr\r\n        curr = nxt\r\n    <span class=\"hljs-keyword\">return</span> prev\n</code></pre>\n<ul>\n<li>findMiddle() implementation.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">findMiddle</span>(<span class=\"hljs-params\">self, head</span>):\r\n    slow = fast = head\r\n    <span class=\"hljs-keyword\">while</span> fast <span class=\"hljs-keyword\">and</span> fast.<span class=\"hljs-built_in\">next</span>:\r\n        slow = slow.<span class=\"hljs-built_in\">next</span>\r\n        fast = fast.<span class=\"hljs-built_in\">next</span>.<span class=\"hljs-built_in\">next</span>\r\n    <span class=\"hljs-keyword\">return</span> slow\n</code></pre>\n<ul>\n<li>hasCycle() implementation.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">hasCycle</span>(<span class=\"hljs-params\">self, head</span>):\r\n    slow = fast = head\r\n    <span class=\"hljs-keyword\">while</span> fast <span class=\"hljs-keyword\">and</span> fast.<span class=\"hljs-built_in\">next</span>:\r\n        slow = slow.<span class=\"hljs-built_in\">next</span>\r\n        fast = fast.<span class=\"hljs-built_in\">next</span>.<span class=\"hljs-built_in\">next</span>\r\n        <span class=\"hljs-keyword\">if</span> slow == fast:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n</code></pre>\n<h3>Dummy Nodes</h3>\n<p>The problems below use dummy nodes to solve there corresponding Linked List questions.</p>\n<p>Dummy nodes are useful for edge cases and returning the proper linked list.</p>\n<p><img src=\"/linkedLists/LinkedList3.png\" alt=\"Singly Linked List\" width=\"779\" height=\"4400\"></p>\n<ul>\n<li>mergedTwoSortedLists() implementation.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">mergeTwoSortedLists</span>(<span class=\"hljs-params\">self, list1, list2</span>):\r\n    dummy = Node(<span class=\"hljs-number\">0</span>)\r\n    head = dummy\r\n\r\n    <span class=\"hljs-keyword\">while</span> list1 <span class=\"hljs-keyword\">and</span> list2:\r\n        <span class=\"hljs-keyword\">if</span> list1.val < list2.val:\r\n            head.<span class=\"hljs-built_in\">next</span> = list1\r\n            list1 = list1.<span class=\"hljs-built_in\">next</span>\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            head.<span class=\"hljs-built_in\">next</span> = list2\r\n            list2 = list2.<span class=\"hljs-built_in\">next</span>\r\n        head = head.<span class=\"hljs-built_in\">next</span>\r\n    \r\n    head.<span class=\"hljs-built_in\">next</span> = list1 <span class=\"hljs-keyword\">if</span> list1 <span class=\"hljs-keyword\">else</span> list2\r\n\r\n    <span class=\"hljs-keyword\">return</span> dummy.<span class=\"hljs-built_in\">next</span>\n</code></pre>\n<ul>\n<li>removeNthFromEnd() implementation.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">removeNthFromEnd</span>(<span class=\"hljs-params\">self, head, n</span>):\r\n    dummy = Node(<span class=\"hljs-number\">0</span>)\r\n    dummy.<span class=\"hljs-built_in\">next</span> = head\r\n    slow = fast = dummy\r\n\r\n    i = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">while</span> i < n:\r\n        fast = fast.<span class=\"hljs-built_in\">next</span>\r\n        i += <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">while</span> fast.<span class=\"hljs-built_in\">next</span>:\r\n        slow = slow.<span class=\"hljs-built_in\">next</span>\r\n        fast = fast.<span class=\"hljs-built_in\">next</span>\r\n    \r\n    slow.<span class=\"hljs-built_in\">next</span> = slow.<span class=\"hljs-built_in\">next</span>.<span class=\"hljs-built_in\">next</span>\r\n    <span class=\"hljs-keyword\">return</span> dummy.<span class=\"hljs-built_in\">next</span>\n</code></pre>\n<h3>Combined Strategies and Complexities</h3>\n<p>The problems below are more complex in their implementations.</p>\n<p>By design, they are much more difficult to solve. However, you should think about the patterns they utilize.</p>\n<p>If you combine these patterns or use them optimally, you'll discover that solving Linked List problems are not so difficult.</p>\n<p>They require practice and patience, like all things LeetCode.</p>\n<p><img src=\"/linkedLists/LinkedList4.png\" alt=\"Singly Linked List\" width=\"820\" height=\"6100\"></p>\n<ul>\n<li>isPalindrome() implementation.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">isPalindrome</span>(<span class=\"hljs-params\">self, head</span>):\r\n    slow = fast = head\r\n    <span class=\"hljs-keyword\">while</span> fast <span class=\"hljs-keyword\">and</span> fast.<span class=\"hljs-built_in\">next</span>:\r\n        slow = slow.<span class=\"hljs-built_in\">next</span>\r\n        fast = fast.<span class=\"hljs-built_in\">next</span>.<span class=\"hljs-built_in\">next</span>\r\n\r\n    prev = <span class=\"hljs-literal\">None</span>\r\n    <span class=\"hljs-keyword\">while</span> slow:\r\n        nxt = slow.<span class=\"hljs-built_in\">next</span>\r\n        slow.<span class=\"hljs-built_in\">next</span> = prev\r\n        prev = slow\r\n        slow = nxt\r\n    \r\n    left, right = head, prev\r\n    <span class=\"hljs-keyword\">while</span> right:\r\n        <span class=\"hljs-keyword\">if</span> left.val != right.val:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n        left = left.<span class=\"hljs-built_in\">next</span>\r\n        right = right.<span class=\"hljs-built_in\">next</span>\r\n    \r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n</code></pre>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">detectCycle</span>(<span class=\"hljs-params\">self, head</span>):\r\n    slow = fast = head\r\n\r\n    <span class=\"hljs-keyword\">while</span> fast <span class=\"hljs-keyword\">and</span> fast.<span class=\"hljs-built_in\">next</span>:\r\n        slow = slow.<span class=\"hljs-built_in\">next</span>\r\n        fast = fast.<span class=\"hljs-built_in\">next</span>.<span class=\"hljs-built_in\">next</span>\r\n        <span class=\"hljs-keyword\">if</span> slow == fast:\r\n            <span class=\"hljs-keyword\">break</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> fast == <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n    \r\n    slow = head\r\n    <span class=\"hljs-keyword\">while</span> slow != fast:\r\n        slow = slow.<span class=\"hljs-built_in\">next</span>\r\n        fast = fast.<span class=\"hljs-built_in\">next</span>\r\n\r\n    <span class=\"hljs-keyword\">return</span> slow\n</code></pre>",
  "title": "Singly Linked Lists",
  "date": "April 6, 2025",
  "category": "DSA",
  "categories": []
}