{
  "id": "personal/20240701",
  "contentHtml": "<h2>Container With Most Water</h2>\n<p>Given n non-negative</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mn>1</mn><mi>a</mi><mn>2</mn><mi>a</mi><mi>n</mi></mrow><annotation>a_{1}\na_{2}\na_{n}</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\"><span><span class=\"pstrut\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\"><span><span class=\"pstrut\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\"><span><span class=\"pstrut\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\"><span></span></span></span></span></span></span></span></span></span></span>\n<p>where each represents a point at the coordinates</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mi>i</mi><mo>,</mo><mi>a</mi><mi>i</mi><mo>)</mo></mrow><annotation>(i, a_{i})</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\"><span><span class=\"pstrut\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span>\n<p>n vertical lines are drawn such that the two endpoints of the line i</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mi>i</mi><mo>,</mo><mi>a</mi><mi>i</mi><mo>)</mo><mi>a</mi><mi>n</mi><mi>d</mi><mo>(</mo><mi>i</mi><mo>,</mo><mn>0</mn><mo>)</mo><mi>.</mi></mrow><annotation>(i, a_{i})\nand\n(i, 0).</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\"><span><span class=\"pstrut\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">an</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mord\">.</span></span></span></span></span>\n<p>Find two lines, which, together with the x-axis forms a container, such that the container contains the most amount of possible water.</p>\n<h3>Example</h3>\n<ul>\n<li>Input: height = [1, 8, 6, 2, 4, 8, 3, 7].</li>\n<li>Output: 49.</li>\n<li>Explanation: The above vertical lines are represented by the array [1, 8, 6, 2, 5, 4, 8, 3, 7]. In this case, the max water is 49.</li>\n</ul>\n<h3>Brute Force Code</h3>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">maxArea</span>(<span class=\"hljs-params\">self, height: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]</span>) -> <span class=\"hljs-built_in\">int</span>:\n        <span class=\"hljs-comment\"># Brute Force</span>\n        res = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">for</span> l <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(height)):\n            <span class=\"hljs-keyword\">for</span> r <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(l + <span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(height)):\n                area = (r - l) * <span class=\"hljs-built_in\">min</span>(height[l], height[r])\n                res = <span class=\"hljs-built_in\">max</span>(res, area)\n            <span class=\"hljs-keyword\">return</span> res\n</code></pre>\n<p>This brute force code is far too slow.</p>\n<h3>Optimal Solution</h3>\n<ul>\n<li>Set the left pointer to the far left.</li>\n<li>Set the right pointer to the far right.</li>\n<li>Think of the max area as a box from the left to the right representing width and the minimum height of the left and right pointers.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">maxArea</span>(<span class=\"hljs-params\">self, height: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]</span>) -> <span class=\"hljs-built_in\">int</span>:\n        res = <span class=\"hljs-number\">0</span>\n        l, r = <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(height) - <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">while</span> l &#x3C; r:\n            area = (r - l) * <span class=\"hljs-built_in\">min</span>(height[l], height[r])\n            res = <span class=\"hljs-built_in\">max</span>(res, area)\n            <span class=\"hljs-keyword\">if</span> (height[l] &#x3C; height[r]):\n                l += <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">else</span>:\n                r -= <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">return</span> res\n</code></pre>\n<p>This solution has an O(n) runtime.</p>\n<h2>Number of 1 bits</h2>\n<p>Write a function that takes an unsigned integer and returns the number of 1 bits it has (also known as the Hamming weight).</p>\n<ul>\n<li>Note:</li>\n<li>In some languages, like Java, there is no unsigned integer type. The input is given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.</li>\n<li>In Java, the compiler represents the signed integers using the 2's complement notation. Therefore, in example 3, the input represents the signed integer -3.</li>\n</ul>\n<h3>Example</h3>\n<ul>\n<li>Input: n = 000001011.</li>\n<li>Output: 3.</li>\n<li>The input binary string has a total of 3 1 bits.</li>\n</ul>\n<h3>Code Example</h3>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">hammingWeight</span>(<span class=\"hljs-params\">self, n: <span class=\"hljs-built_in\">int</span></span>) -> <span class=\"hljs-built_in\">int</span>:\n        res = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">while</span> n:\n            res += n % <span class=\"hljs-number\">2</span>\n            n = n >> <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">return</span> res\n</code></pre>\n<p>The time complexity is O(1).</p>\n<h3>Demystifying the example</h3>\n<p>What is actually going on in the code?</p>\n<ul>\n<li>10000001</li>\n<li>n = n &#x26; (n - 1)</li>\n<li>res += 1</li>\n<li>10000001</li>\n<li>&#x26; 10000000</li>\n<li>= 10000000</li>\n<li>&#x26; 01111111</li>\n<li>= 00000000</li>\n<li>res = 2</li>\n</ul>\n<h3>New Coding Solution</h3>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">hammingWeight</span>(<span class=\"hljs-params\">self, n: <span class=\"hljs-built_in\">int</span></span>) -> <span class=\"hljs-built_in\">int</span>:\n        res = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">while</span> n:\n            n = n &#x26; (n - <span class=\"hljs-number\">1</span>)\n            res += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">return</span> res\n</code></pre>\n<p>The time complexity is still O(1) in this example.</p>",
  "title": "Arrays and Bits",
  "date": "July 1, 2024",
  "category": "Personal",
  "categories": []
}