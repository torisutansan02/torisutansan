{
  "id": "personal/20240624",
  "contentHtml": "<h2>Search in Rotated Sorted Array</h2>\n<p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p>\n<p>(i.e., [0, 1, 2, 4, 5, 6, 7] might become [4, 5, 6, 7, 0, 1, 2]).</p>\n<p>You are given a target value to search. If you find the value in the array, return its index. Else, return -1.</p>\n<p>Assume no duplicate exists in the array.</p>\n<ul>\n<li>Algorithm complexity must be in the runtime O(log(n)).</li>\n</ul>\n<h3>Examples</h3>\n<ul>\n<li>\n<p>Input: nums = [4, 5, 6, 7, 0, 1, 2], target = 0.</p>\n</li>\n<li>\n<p>Output: 4.</p>\n</li>\n<li>\n<p>Input: nums = [4, 5, 6, 7, 0, 1, 2], target = 3.</p>\n</li>\n<li>\n<p>Output: -1.</p>\n</li>\n</ul>\n<h3>Binary Search</h3>\n<p>Imagine we have two linear lines in a graph.</p>\n<ul>\n<li>0, 1, 2.</li>\n<li>4, 5, 6, 7.\r\nTwo independently sorted arrays.</li>\n<li>Left Pointer, Middle Pointer, and Right Pointer.</li>\n<li>Left <= Right.</li>\n<li>Middle value is 6.</li>\n<li>Let's say our target value is 0.</li>\n<li>4, 5, 6, 7, 0, 1, 2.</li>\n<li>Middle pointer is 7, left pointer is 4, and right pointer is 2.</li>\n<li>0 is less than 7, the middle pointer, and 0 is also less than 4, the left pointer.</li>\n<li>Get rid of 4, 5, 6, 7.</li>\n<li>Left with 0, 1, 2.</li>\n<li>Eliminate 1 and 2, the new middle and right pointers.</li>\n</ul>\n<h3>Code</h3>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span>:\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">search</span>(<span class=\"hljs-params\">self, nums: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>], target: <span class=\"hljs-built_in\">int</span></span>) -> <span class=\"hljs-built_in\">int</span>:\r\n        l, r = <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span>\r\n\r\n        <span class=\"hljs-comment\"># [1]</span>\r\n        <span class=\"hljs-keyword\">while</span> l <= r:\r\n            mid = (l + r) // <span class=\"hljs-number\">2</span>\r\n            <span class=\"hljs-keyword\">if</span> target == nums[mid]:\r\n                <span class=\"hljs-keyword\">return</span> mid\r\n\r\n            <span class=\"hljs-comment\"># left sorted portion</span>\r\n            <span class=\"hljs-keyword\">if</span> nums[l] <= nums[mid]:\r\n                <span class=\"hljs-keyword\">if</span> target > nums[mid] <span class=\"hljs-keyword\">or</span> target < nums[l]:\r\n                    l = mid + <span class=\"hljs-number\">1</span>\r\n                <span class=\"hljs-keyword\">else</span>:\r\n                    r = mid - <span class=\"hljs-number\">1</span>\r\n            <span class=\"hljs-comment\"># right sorted portion</span>\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                <span class=\"hljs-keyword\">if</span> target < nums[mid] <span class=\"hljs-keyword\">or</span> target > nums[r]:\r\n                    r = mid - <span class=\"hljs-number\">1</span>\r\n                <span class=\"hljs-keyword\">else</span>:\r\n                    l = mid + <span class=\"hljs-number\">1</span>\r\n\r\n        <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\n</code></pre>\n<h2>3Sum</h2>\n<p>Given an array nums of n integers, are there 3 elements a, b, and c in nums where a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.</p>\n<ul>\n<li>Note:</li>\n<li>The solution set must not contain duplicate triplets.</li>\n</ul>\n<h3>Example</h3>\n<p>Given array nums = [-1, 0, 1, 2, -1, 4],</p>\n<ul>\n<li>A solution set is:</li>\n<li>[</li>\n<li>\n<pre><code>[-1, 0, 1],\n</code></pre>\n</li>\n<li>\n<pre><code>[-1, -1, 2]\n</code></pre>\n</li>\n<li>]</li>\n</ul>\n<h3>Concept</h3>\n<p>Let's say we have an array [-3, 3, 4, -3, 1, 2].</p>\n<ul>\n<li>a + b + c must = 0.</li>\n<li>-3 + 1 + 2.</li>\n<li>This is a brute force case where:</li>\n<li>a = -3, b = 3, 4, -3, 1, c = 2.</li>\n<li>Three for loops and highly inefficient.</li>\n<li>We are not allowed to find duplicates.</li>\n</ul>\n<h3>Sort Input Array</h3>\n<p>Sort the input array.</p>\n<ul>\n<li>[-3, -3, 1, 2, 3, 4].</li>\n<li>If we find a number, ignore it!</li>\n<li>[-3, 1, 2].</li>\n<li>-3 + 1 + 2 = 0.</li>\n<li>Reduces it to Two Sum.</li>\n</ul>\n<h3>Left and Right Pointer</h3>\n<ul>\n<li>Left pointer is -3 and right pointer is 4.</li>\n<li>If sum > 0, shift right pointer left.</li>\n<li>Right pointer is no longer 4, it is 3.</li>\n<li>If sum < 0, shift right pointer right.</li>\n<li>Shift if there is a duplicate.</li>\n<li>Time: O(nlog(n)) + O(n^2).</li>\n<li>Time: O(n^2).</li>\n<li>Space: O(1) or O(n) depending on sorting library.</li>\n</ul>",
  "title": "Rotated Sorted Array",
  "date": "June 24, 2024",
  "category": "Personal",
  "categories": []
}