{
  "id": "dsa/staticarrays",
  "contentHtml": "<h1>Static Arrays</h1>\n<p>Arrays must have an allocated size and type.</p>\n<ul>\n<li>Particularly true for statically typed languages.\n<ul>\n<li>Not true for dynamically typed languages.</li>\n</ul>\n</li>\n<li>Size of the array cannot change.</li>\n</ul>\n<h2>Array Read</h2>\n<p>You can read an array from its <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi></mrow><annotation>index</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">x</span></span></span></span> which represents its position:</p>\n<ul>\n<li>Denoted as <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation>i</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">i</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><annotation>i = 0</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\"></span><span class=\"mrel\">=</span><span class=\"mspace\"></span></span><span class=\"base\"><span class=\"strut\"></span><span class=\"mord\">0</span></span></span></span>\n<ul>\n<li>The <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn><mo>−</mo><mi>t</mi><mi>h</mi></mrow><annotation>0-th</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord\">0</span><span class=\"mspace\"></span><span class=\"mbin\">−</span><span class=\"mspace\"></span></span><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span></span></span></span> index or first index.</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># Array with 3 values</span>\narr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n\n<span class=\"hljs-comment\"># Index 0 (first index)</span>\ni = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-built_in\">print</span>(arr[i])\n</code></pre>\n<p><img src=\"/dsa/staticarrays/StaticArrays1.svg\" alt=\"Image\"></p>\n<p>Accessing an array index's value is instant.</p>\n<ul>\n<li>It is mapped to an address in memory.</li>\n<li>We refer to this as <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation>O(1)</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> time complexity.</li>\n</ul>\n<h2>Traversal</h2>\n<p>It is possible to read through all values in an array.</p>\n<ul>\n<li>Do this with either a <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mi>o</mi><mi>r</mi></mrow><annotation>for</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">f</span><span class=\"mord mathnormal\">or</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>w</mi><mi>h</mi><mi>i</mi><mi>l</mi><mi>e</mi></mrow><annotation>while</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">w</span><span class=\"mord mathnormal\">hi</span><span class=\"mord mathnormal\">l</span><span class=\"mord mathnormal\">e</span></span></span></span> loop.</li>\n</ul>\n<pre><code class=\"hljs language-python\">arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n\n<span class=\"hljs-comment\"># For Loop</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(arr)):\n    <span class=\"hljs-built_in\">print</span>(arr[i])\n\n<span class=\"hljs-comment\"># While Loop</span>\ni = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">while</span> i &#x3C; <span class=\"hljs-built_in\">len</span>(arr):\n    <span class=\"hljs-built_in\">print</span>(arr[i])\n    i += <span class=\"hljs-number\">1</span>\n</code></pre>\n<p>Traversal through an array requires us to access every index.</p>\n<ul>\n<li>The index is size <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation>n</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">n</span></span></span></span> which is its length.\n<ul>\n<li>The time complexity, therefore, is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation>O(n)</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n</li>\n</ul>\n<p>What is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation>O(n)</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> time complexity?</p>\n<ul>\n<li>Linear growth.\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation>n</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">n</span></span></span></span> is variable in length.</li>\n</ul>\n</li>\n</ul>\n<h2>Deletion</h2>\n<p>It is also possible to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mi>e</mi><mi>l</mi><mi>e</mi><mi>t</mi><mi>e</mi></mrow><annotation>delete</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span></span></span></span> from an array.</p>\n<ul>\n<li>With caveats:\n<ul>\n<li>Overwriting (<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>s</mi><mi>o</mi><mi>f</mi><mi>t</mi></mrow><annotation>soft</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">so</span><span class=\"mord mathnormal\">f</span><span class=\"mord mathnormal\">t</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mi>e</mi><mi>t</mi><mi>e</mi><mi>t</mi><mi>e</mi></mrow><annotation>detete</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span></span></span></span>).</li>\n</ul>\n</li>\n</ul>\n<h3>Deleting from the End</h3>\n<p>In <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>s</mi><mi>t</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>c</mi><mi>a</mi><mi>l</mi><mi>l</mi><mi>y</mi></mrow><annotation>statically</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">ll</span><span class=\"mord mathnormal\">y</span></span></span></span> types languages:</p>\n<ul>\n<li>Arrays are filled with 0s.\n<ul>\n<li>Or <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation>-1</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi></mrow><annotation>null</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">ll</span></span></span></span></li>\n<li>Denotes an empty index.</li>\n</ul>\n</li>\n</ul>\n<p>We can also decrease the length by 1.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># Array and its length</span>\narr = [<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>]\nn = <span class=\"hljs-built_in\">len</span>(arr)\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">removeLast</span>(<span class=\"hljs-params\">arr, n</span>):\n    <span class=\"hljs-comment\"># Array is at least size 1</span>\n    <span class=\"hljs-keyword\">if</span> n > <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-comment\"># Overwrite and decrement length</span>\n        arr[n - <span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0</span>\n        n -= <span class=\"hljs-number\">1</span>\n    \n    <span class=\"hljs-keyword\">return</span> arr\n\n<span class=\"hljs-built_in\">print</span>(removeLast(arr, n))\n</code></pre>\n<p><img src=\"/dsa/staticarrays/StaticArrays2.svg\" alt=\"Image\"></p>\n<h3>Deleting at Index</h3>\n<p>Requires us to follow the contiguous structure of an array.</p>\n<ul>\n<li>Declare an index <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation>i</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">i</span></span></span></span></li>\n<li>Start from <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation>i + 1</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\"></span><span class=\"mbin\">+</span><span class=\"mspace\"></span></span><span class=\"base\"><span class=\"strut\"></span><span class=\"mord\">1</span></span></span></span></li>\n<li>Shift elements <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn></mrow><annotation>1</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord\">1</span></span></span></span> position to the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow><annotation>left</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">f</span><span class=\"mord mathnormal\">t</span></span></span></span></li>\n<li>Mark last <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mi>n</mi><mi>d</mi><mi>e</mi><mi>x</mi></mrow><annotation>index</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">x</span></span></span></span> as <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn></mrow><annotation>0</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord\">0</span></span></span></span>\n<ul>\n<li>Decrement <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mi>e</mi><mi>n</mi><mi>g</mi><mi>t</mi><mi>h</mi></mrow><annotation>length</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">g</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span></span></span></span></li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># Array, index, and length</span>\narr = [<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>]\ni = <span class=\"hljs-number\">1</span>\nn = <span class=\"hljs-built_in\">len</span>(arr)\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">removeMid</span>(<span class=\"hljs-params\">arr, i, n</span>):\n    <span class=\"hljs-keyword\">for</span> index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(i + <span class=\"hljs-number\">1</span>, n):\n        <span class=\"hljs-comment\"># Shift previous index with current index</span>\n        arr[index - <span class=\"hljs-number\">1</span>] = arr[index]\n    \n    <span class=\"hljs-comment\"># Set last element to 0</span>\n    arr[n - <span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-comment\"># Decrease length</span>\n    n -= <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> arr\n\n<span class=\"hljs-built_in\">print</span>(removeMid(arr, i, n))\n</code></pre>\n<p><img src=\"/dsa/staticarrays/StaticArrays3.svg\" alt=\"Image\"></p>\n<h2>Insertion</h2>\n<p>Requires us to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mi>l</mi><mi>l</mi><mi>o</mi><mi>c</mi><mi>a</mi><mi>t</mi><mi>e</mi></mrow><annotation>allocate</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">ll</span><span class=\"mord mathnormal\">oc</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span></span></span></span> more space to the array.</p>\n<ul>\n<li>Increase the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>c</mi><mi>a</mi><mi>p</mi><mi>a</mi><mi>c</mi><mi>i</mi><mi>t</mi><mi>y</mi></mrow><annotation>capacity</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">y</span></span></span></span> of the array.</li>\n</ul>\n<h3>Insertion at End</h3>\n<p>The next open position which will be at the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>l</mi><mi>e</mi><mi>n</mi><mi>g</mi><mi>t</mi><mi>h</mi></mrow><annotation>length</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">g</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span></span></span></span></p>\n<ul>\n<li>The length is noted by <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation>n</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">n</span></span></span></span></li>\n</ul>\n<p>The length is the number of elements in the array:</p>\n<ul>\n<li>The capacity is the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow><annotation>max</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span></span></span></span> number of elements an array can hold.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> random\n\n<span class=\"hljs-comment\"># Array, length, value to be inserted, capacity</span>\narr = [<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>]\nn = <span class=\"hljs-number\">3</span>\nval = random.randint(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>)\ncapacity = <span class=\"hljs-number\">3</span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insertLast</span>(<span class=\"hljs-params\">arr, n, val, capacity</span>):\n    <span class=\"hljs-comment\"># The length must be less than the capacity.</span>\n    <span class=\"hljs-keyword\">if</span> n &#x3C; capacity:\n        arr[n] = val\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-comment\"># Double the capacity capacity</span>\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Increasing Capacity\"</span>)\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(capacity, capacity * <span class=\"hljs-number\">2</span>):\n            arr.append(<span class=\"hljs-number\">0</span>)\n        capacity *= <span class=\"hljs-number\">2</span>\n        arr[n] = val\n    \n    <span class=\"hljs-comment\"># Increment length</span>\n    n += <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">return</span> arr, n, capacity\n\narr, n, capacity = insertLast(arr, n, val, capacity)\n<span class=\"hljs-built_in\">print</span>(arr)\n\nval = random.randint(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>)\narr, n, capacity = insertLast(arr, n, val, capacity)\n<span class=\"hljs-built_in\">print</span>(arr)\n</code></pre>\n<p><img src=\"/dsa/staticarrays/StaticArrays4.svg\" alt=\"Image\"></p>\n<h3>Inserting at Index</h3>\n<p>We need to shift all values from the right of index <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation>i</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">i</span></span></span></span> to:</p>\n<ul>\n<li>Insert the value at the index in the array.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> random\n\n<span class=\"hljs-comment\"># Array, Index, Length, value to be inserted</span>\narr = [<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>]\ni = <span class=\"hljs-number\">1</span>\nn = <span class=\"hljs-number\">3</span>\nval = random.randint(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>)\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insertMid</span>(<span class=\"hljs-params\">arr, i, n, val</span>):\n    <span class=\"hljs-comment\"># Shift elements to the right of i</span>\n    <span class=\"hljs-keyword\">for</span> index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n - <span class=\"hljs-number\">1</span>, i - <span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>):\n        arr[index + <span class=\"hljs-number\">1</span>] = arr[index]\n\n    <span class=\"hljs-comment\"># Insert value at index</span>\n    arr[i] = val\n\n    <span class=\"hljs-keyword\">return</span> arr\n\n<span class=\"hljs-built_in\">print</span>(insertMid(arr, i, n, val))\n</code></pre>\n<p><img src=\"/dsa/staticarrays/StaticArrays5.svg\" alt=\"Image\"></p>\n<h2>Time Complexity</h2>\n<p>The time complexity for the algorithms:</p>\n<ul>\n<li>Read an element:\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation>O(1)</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n</li>\n<li>Traversal:\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation>O(n)</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n</li>\n<li>Insertion / Deletion at end:\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation>O(1)</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n</li>\n<li>Insertion / Deletion in middle:\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation>O(n)</annotation></semantics></math></span><span class=\"katex-html\"><span class=\"base\"><span class=\"strut\"></span><span class=\"mord mathnormal\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n</li>\n</ul>",
  "title": "Static Arrays",
  "date": "July 16, 2025",
  "category": "DSA",
  "categories": []
}