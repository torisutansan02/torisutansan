{
  "id": "trees",
  "contentHtml": "<h1>Trees</h1>\n<p>Below, I will include the most common operations and the implementation of binary trees and binary search trees (BST).</p>\n<p><a href=\"https://github.com/torisutansan02/Implementing-Data-Structures-and-Algorithms/tree/main/Trees\">Trees</a></p>\n<h2>Visual Cheat Sheet</h2>\n<p>The cheat sheet will be based on four levels of difficulty.</p>\n<ul>\n<li>Levels of Difficulty:\n<ul>\n<li>(1) Traversals. DFS and BFS.\n<ul>\n<li>Fundamental search algorithms.</li>\n</ul>\n</li>\n<li>(2) Binary Tree Properties.\n<ul>\n<li>Fundamental properties of binary trees.</li>\n</ul>\n</li>\n<li>(3) Binary Search Trees and Properties.\n<ul>\n<li>Fundamental properties of BSTs.</li>\n</ul>\n</li>\n<li>(4) Advanced Tree Operations.\n<ul>\n<li>Necessary to solve <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>o</mi><mi>s</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">most</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">os</span><span class=\"mord mathnormal\">t</span></span></span></span> LeetCode problems.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>Traversals</h3>\n<p>Below are the operations for basic tree traversals.</p>\n<p>Some are easier than others.</p>\n<ul>\n<li>Order to learn:\n<ul>\n<li>Depth First Search (DFS).\n<ul>\n<li>Inorder.</li>\n<li>Preorder.</li>\n<li>Postorder.</li>\n</ul>\n</li>\n<li>Breadth First Search (BFS).\n<ul>\n<li>Level Order.</li>\n<li>Zig Zag Level Order.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>Zig Zag level order is particularly difficult.</p>\n<p>Pay attention to each level and use a boolean like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mi>T</mi><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">LTR</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">TR</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mi>T</mi><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">RTL</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">RT</span><span class=\"mord mathnormal\">L</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo>−</mo><mi>t</mi><mi>o</mi><mo>−</mo><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">left-to-right</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6984em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">o</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo>−</mo><mi>t</mi><mi>o</mi><mo>−</mo><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">right-to-left</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6984em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">o</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">t</span></span></span></span> traversal.</p>\n<p><img src=\"/trees/Traversals.png\" alt=\"Traversals\"></p>\n<ul>\n<li>inorder() implementation.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">inorder</span>(<span class=\"hljs-params\">self, root</span>):\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> root:\r\n        <span class=\"hljs-keyword\">return</span> []\r\n    \r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">self</span>.inorder(root.left) + [root.val] + <span class=\"hljs-variable language_\">self</span>.inorder(root.right)\n</code></pre>\n<ul>\n<li>preorder() implementation.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">preorder</span>(<span class=\"hljs-params\">self, root</span>):\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> root:\r\n        <span class=\"hljs-keyword\">return</span> []\r\n\r\n    <span class=\"hljs-keyword\">return</span> [root.val] + <span class=\"hljs-variable language_\">self</span>.preorder(root.left) + <span class=\"hljs-variable language_\">self</span>.preorder(root.right)\n</code></pre>\n<ul>\n<li>postorder() implementation.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">postorder</span>(<span class=\"hljs-params\">self, root</span>):\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> root:\r\n        <span class=\"hljs-keyword\">return</span> []\r\n    \r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">self</span>.postorder(root.left) + <span class=\"hljs-variable language_\">self</span>.postorder(root.right) + [root.val]\n</code></pre>\n<ul>\n<li>bfs() implementation.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bfs</span>(<span class=\"hljs-params\">self, root</span>):\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> root:\r\n        <span class=\"hljs-keyword\">return</span> []\r\n\r\n    res = []\r\n    q = deque(root)\r\n\r\n    <span class=\"hljs-keyword\">while</span> queue:\r\n        node = q.popleft()\r\n        res.append(node.val)\r\n\r\n        <span class=\"hljs-keyword\">if</span> node.left:\r\n            q.append(node.left)\r\n        <span class=\"hljs-keyword\">if</span> node.right:\r\n            q.append(node.right)\r\n    \r\n    <span class=\"hljs-keyword\">return</span> res\n</code></pre>\n<ul>\n<li>zigzag() implementation.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">zigzag</span>(<span class=\"hljs-params\">self, root</span>):\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> root:\r\n        <span class=\"hljs-keyword\">return</span> []\r\n\r\n    q = deque(root)\r\n    res = []\r\n\r\n    LTR = <span class=\"hljs-literal\">True</span>\r\n    RTL = <span class=\"hljs-literal\">False</span>\r\n\r\n    <span class=\"hljs-keyword\">while</span> queue:\r\n        level = deque()\r\n        \r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(q)):\r\n            node = q.popleft()\r\n\r\n            <span class=\"hljs-keyword\">if</span> LTR:\r\n                level.append(node.val)\r\n            <span class=\"hljs-keyword\">elif</span> RTL:\r\n                level.appendleft(node.val)\r\n\r\n            <span class=\"hljs-keyword\">if</span> node.left:\r\n                q.append(node.left)\r\n            <span class=\"hljs-keyword\">if</span> node.right:\r\n                q.append(node.right)\r\n        \r\n        res.append(<span class=\"hljs-built_in\">list</span>(level))\r\n        LTR, RTL = RTL, LTR\r\n    \r\n    <span class=\"hljs-keyword\">return</span> res\n</code></pre>\n<h3>Binary Tree Properties</h3>\n<p>There are many different Binary Tree (BT) properties common in tree problems.</p>\n<p>You should familiarize yourself with some.</p>\n<ul>\n<li>Common Patterns:\n<ul>\n<li>Height of a tree.</li>\n<li>Is it balanced?</li>\n<li>Least Common Ancestor (LCA).</li>\n<li>Counting nodes in a tree.</li>\n<li>Counting leaves in a tree.</li>\n<li>Are two trees the same?</li>\n<li>Is a tree a subtree of a tree?</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/trees/BinaryTreeProperties.png\" alt=\"BT Properties\"></p>\n<ul>\n<li>height() implementation.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">height</span>(<span class=\"hljs-params\">self, root</span>):\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> root:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> + <span class=\"hljs-built_in\">max</span>(<span class=\"hljs-variable language_\">self</span>.height(root.left), <span class=\"hljs-variable language_\">self</span>.height(root.right))\n</code></pre>\n<ul>\n<li>isBalanced() implementation.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">isBalanced</span>(<span class=\"hljs-params\">self, root</span>):\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dfs</span>(<span class=\"hljs-params\">root</span>):\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> root:\r\n            <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-literal\">True</span>, <span class=\"hljs-number\">0</span>]\r\n\r\n        L = dfs(root.left)\r\n        R = dfs(root.right)\r\n\r\n        b = L[<span class=\"hljs-number\">0</span>] <span class=\"hljs-keyword\">and</span> R[<span class=\"hljs-number\">0</span>] <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-built_in\">abs</span>(L[<span class=\"hljs-number\">1</span>] - R[<span class=\"hljs-number\">1</span>]) <= <span class=\"hljs-number\">1</span>)\r\n        h = <span class=\"hljs-number\">1</span> + <span class=\"hljs-built_in\">max</span>(L[<span class=\"hljs-number\">1</span>], R[<span class=\"hljs-number\">1</span>])\r\n\r\n        <span class=\"hljs-keyword\">return</span> [b, h]\r\n\r\n    <span class=\"hljs-keyword\">return</span> dfs(root)[<span class=\"hljs-number\">0</span>]\n</code></pre>\n<ul>\n<li>lcaBT() implementation.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">lcaBT</span>(<span class=\"hljs-params\">self, root, p, q</span>):\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> root <span class=\"hljs-keyword\">or</span> root == p <span class=\"hljs-keyword\">or</span> root == q:\r\n        <span class=\"hljs-keyword\">return</span> root\r\n    \r\n    L = <span class=\"hljs-variable language_\">self</span>.lcaBT(root.left, p, q)\r\n    R = <span class=\"hljs-variable language_\">self</span>.lcaBT(root.right, p, q)\r\n\r\n    <span class=\"hljs-keyword\">if</span> L <span class=\"hljs-keyword\">and</span> R:\r\n        <span class=\"hljs-keyword\">return</span> root\r\n    \r\n    <span class=\"hljs-keyword\">return</span> L <span class=\"hljs-keyword\">or</span> R\n</code></pre>\n<ul>\n<li>countNodes() implementation.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">countNodes</span>(<span class=\"hljs-params\">self, root</span>):\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> root:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\r\n    \r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> + <span class=\"hljs-variable language_\">self</span>.countNodes(root.left) + <span class=\"hljs-variable language_\">self</span>.countNodes(root.right)\n</code></pre>\n<ul>\n<li>countLeaves() implementation.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">countLeaves</span>(<span class=\"hljs-params\">self, root</span>):\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> root:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> root.left <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">not</span> root.right:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">self</span>.countLeaves(root.left) + <span class=\"hljs-variable language_\">self</span>.countLeaves(root.right)\n</code></pre>\n<ul>\n<li>isSameTree() implementation.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">isSameTree</span>(<span class=\"hljs-params\">self, p, q</span>):\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> p <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">not</span> q:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n    \r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> p <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">not</span> q:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> p.val != q.val:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n    \r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">self</span>.isSameTree(p.left, q.left) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable language_\">self</span>.isSameTree(p.right, q.right)\n</code></pre>\n<ul>\n<li>isSubtree() implementation.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">isSubtree</span>(<span class=\"hljs-params\">self, root, subRoot</span>):\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> root:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n    \r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable language_\">self</span>.isSameTree(root, subRoot):\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">self</span>.isSubTree(<span class=\"hljs-variable language_\">self</span>.left, subRoot) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-variable language_\">self</span>.isSubTree(<span class=\"hljs-variable language_\">self</span>.right, subRoot)\n</code></pre>\n<h3>Binary Search Trees (BST)</h3>\n<p>Binary Search Trees are a bit more complicated than Binary Trees.</p>\n<ul>\n<li>Properties:\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>l</mi><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">All</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">ll</span></span></span></span> values to the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">left</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">t</span></span></span></span> of the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">root</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span></span></span></span> are <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo><</mo><mo>=</mo></mrow><annotation encoding=\"application/x-tex\"><=</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\"><=</span></span></span></span> to the root.</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi>l</mi><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">All</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">ll</span></span></span></span> values to the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">right</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span></span></span></span> of the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">root</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span></span></span></span> are <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>></mo><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">>=</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">>=</span></span></span></span> to the root.</li>\n</ul>\n</li>\n</ul>\n<p>What should you practice?</p>\n<ul>\n<li>In my opinion:\n<ul>\n<li>Insertion.</li>\n<li>Deletion.</li>\n<li>Searching.</li>\n<li>LCA.</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/trees/BinarySearchTrees.png\" alt=\"BST Properties\"></p>\n<ul>\n<li>insert() implementation.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-params\">self, root, val</span>):\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> root:\r\n        <span class=\"hljs-keyword\">return</span> TreeNode(val)\r\n    \r\n    <span class=\"hljs-keyword\">if</span> val < root.val:\r\n        root.left = <span class=\"hljs-variable language_\">self</span>.insert(root.left, val)\r\n    <span class=\"hljs-keyword\">else</span>:\r\n        root.right = <span class=\"hljs-variable language_\">self</span>.insert(root.right, val)\r\n    \r\n    <span class=\"hljs-keyword\">return</span> root\n</code></pre>\n<ul>\n<li>remove() implementation.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-params\">self, root, val</span>):\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> root:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n    \r\n    <span class=\"hljs-keyword\">if</span> val < root.val:\r\n        root.left = <span class=\"hljs-variable language_\">self</span>.remove(root.left, val)\r\n    <span class=\"hljs-keyword\">elif</span> val > root.val:\r\n        root.right = <span class=\"hljs-variable language_\">self</span>.remove(root.right, val)\r\n    <span class=\"hljs-keyword\">else</span>:\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> root.left:\r\n            <span class=\"hljs-keyword\">return</span> root.right\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> root.right:\r\n            <span class=\"hljs-keyword\">return</span> root.right\r\n        \r\n        curr = root.right\r\n        <span class=\"hljs-keyword\">while</span> curr.left:\r\n            curr = curr.left\r\n        root.val = curr.val\r\n        root.right = <span class=\"hljs-variable language_\">self</span>.remove(root.right, curr.val)\r\n    \r\n    <span class=\"hljs-keyword\">return</span> root\n</code></pre>\n<ul>\n<li>search() implementation.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">search</span>(<span class=\"hljs-params\">self, root, val</span>):\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> root <span class=\"hljs-keyword\">or</span> root.val == val:\r\n        <span class=\"hljs-keyword\">return</span> root\r\n    \r\n    <span class=\"hljs-keyword\">if</span> val < root.val:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">self</span>.search(root.left, val)\r\n    <span class=\"hljs-keyword\">else</span>:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">self</span>.search(root.right, val)\n</code></pre>\n<ul>\n<li>lcaBST() implementation.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">lcaBST</span>(<span class=\"hljs-params\">self, root, p, q</span>):\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> root:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> p.val < root.val <span class=\"hljs-keyword\">and</span> q.val < root.val:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">self</span>.lcaBST(root.left, p, q)\r\n    <span class=\"hljs-keyword\">elif</span> p.val > root.val <span class=\"hljs-keyword\">and</span> q.val > root.val:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">self</span>.lcaBST(root.right, p, q)\r\n    \r\n    <span class=\"hljs-keyword\">return</span> root\n</code></pre>\n<h3>Advanced Tree Operations</h3>\n<p>These operations are quite advanced.</p>\n<p>Do the following:</p>\n<ul>\n<li>Invert a tree.</li>\n<li>Find the binary tree paths.</li>\n<li>Serialize a tree.\n<ul>\n<li>Turn it into a string.</li>\n</ul>\n</li>\n<li>Deserialize a tree.\n<ul>\n<li>Turn it back into a tree.</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/trees/AdvancedTrees.png\" alt=\"Advanced Trees\"></p>\n<ul>\n<li>invertTree() implementation.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">invertTree</span>(<span class=\"hljs-params\">self, root</span>):\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> root:\r\n        <span class=\"hljs-keyword\">return</span> none\r\n    \r\n    root.left, root.right = <span class=\"hljs-variable language_\">self</span>.invertTree(root.right), <span class=\"hljs-variable language_\">self</span>.invertTree(root.left)\r\n    <span class=\"hljs-keyword\">return</span> roon\n</code></pre>\n<ul>\n<li>binaryTreePaths() implementation.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">binaryTreePaths</span>(<span class=\"hljs-params\">self, root</span>):\r\n    paths = []\r\n    \r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dfs</span>(<span class=\"hljs-params\">node, path</span>):\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> node:\r\n            <span class=\"hljs-keyword\">return</span>\r\n\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> node.left <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">not</span> node.right:\r\n            paths.append(path + <span class=\"hljs-built_in\">str</span>(node.val))\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            dfs(node.left, path + <span class=\"hljs-built_in\">str</span>(node.val) + <span class=\"hljs-string\">\"->\"</span>)\r\n            dfs(node.right, path + <span class=\"hljs-built_in\">str</span>(node.val) + <span class=\"hljs-string\">\"->\"</span>)\r\n    \r\n    dfs(root, <span class=\"hljs-string\">\"\"</span>)\r\n\r\n    <span class=\"hljs-keyword\">return</span> paths\n</code></pre>\n<ul>\n<li>serialize() implementation.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">serialize</span>(<span class=\"hljs-params\">self, root</span>):\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> root:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span>\r\n\r\n    res = []\r\n    q = deque([root])\r\n\r\n    <span class=\"hljs-keyword\">while</span> q:\r\n        node = q.popleft()\r\n\r\n        <span class=\"hljs-keyword\">if</span> node:\r\n            res.append(<span class=\"hljs-built_in\">str</span>(node.val))\r\n            q.append(root.left)\r\n            q.append(root.right)\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            q.append(<span class=\"hljs-string\">\"null\"</span>)\r\n    \r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\", \"</span>.join(res)\n</code></pre>\n<ul>\n<li>deserialize() implementation.</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">deserialize</span>(<span class=\"hljs-params\">self, data</span>):\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> data:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n    \r\n    nodes = data.split(<span class=\"hljs-string\">', '</span>)\r\n    root = TreeNode(<span class=\"hljs-built_in\">int</span>(nodes[<span class=\"hljs-number\">0</span>]))\r\n    q = deque([root])\r\n    i = <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">while</span> q:\r\n        node = q.popleft()\r\n\r\n        <span class=\"hljs-keyword\">if</span> nodes[i] != <span class=\"hljs-string\">\"null\"</span>:\r\n            node.left = TreeNode(<span class=\"hljs-built_in\">int</span>(nodes[i]))\r\n            q.append(node.left)\r\n        i += <span class=\"hljs-number\">1</span>\r\n\r\n        <span class=\"hljs-keyword\">if</span> nodes[i] != <span class=\"hljs-string\">\"null\"</span>:\r\n            node.right = TreeNode(<span class=\"hljs-built_in\">int</span>(nodes[i]))\r\n            q.append(node.right)\r\n        i += <span class=\"hljs-number\">1</span>\r\n    \r\n    <span class=\"hljs-keyword\">return</span> root\n</code></pre>",
  "title": "Trees",
  "date": "April 12, 2025",
  "category": "DSA",
  "categories": []
}