{
  "id": "vue/watchers",
  "contentHtml": "<h1>Vue Watchers</h1>\n<p>What is a watcher?</p>\n<ul>\n<li>Method that watches a data property with the same name.</li>\n<li>Runs every time the data property value changes.</li>\n<li>Use if a certain data property value requires an action.</li>\n</ul>\n<h2>Watcher Concept</h2>\n<p>It's reserved name is 'watcher'.</p>\n<p>A watcher method is never called.</p>\n<ul>\n<li>Automically called when a property value changes.</li>\n<li>New property value is available as an input argument to the watcher method\n<ul>\n<li>As is the old value.</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"range\"</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"rangeVal\"</span>></span>\r\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span> {{ rangeVal }} <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\r\n\r\nconst app = Vue.createApp({\r\n    data() {\r\n        rangeVal: 70\r\n    },\r\n    watch: {\r\n        rangeVal(val) {\r\n            if (val > 20 &#x26;&#x26; val &#x3C; 60) {\r\n                if (val &#x3C; 40) {\r\n                    this.rangeVal = 20;\r\n                }\r\n                else {\r\n                    this.rangeVal = 60;\r\n                }\r\n            }\r\n        }\r\n    }\r\n})\n</code></pre>\n<h2>Watcher With New and Old Values</h2>\n<p>New and old property value automatically available as input arguments to watcher methods.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-on:click</span>=<span class=\"hljs-string\">\"updatePos\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\r\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span> {{ xDiff }} <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\r\n\r\nconst app = Vue.createApp({\r\n    data() {\r\n        xPos: 0,\r\n        xDiff: 0\r\n    },\r\n    watch: {\r\n        xPos(newVal, oldVal) {\r\n            this.xDiff = newVal - oldVal\r\n        }\r\n    },\r\n    methods: {\r\n        updatePos(event) {\r\n            this.xPos = event.offsetX\r\n        }\r\n    }\r\n})\n</code></pre>\n<p>We can use these values to give feedback to the user the exact moment the input goes from invalid to valid.</p>\n<pre><code class=\"hljs language-html\"></code></pre>\n<h2>Watchers vs. Methods</h2>\n<p>Here are the differences between watches and methods:</p>\n<ul>\n<li>Methods are called from HTML.</li>\n<li>Methods called when an event happens.</li>\n<li>Methods automatically receive event object as input.</li>\n<li>Send other values we choose as input to a method.</li>\n<li>Watchers called when the watched data property value changes.\n<ul>\n<li>Happens automatically.</li>\n</ul>\n</li>\n<li>We cannot send other values with a watcher as an input.</li>\n</ul>\n<h2>Watchers vs. Computed Properties</h2>\n<p>They are both written as functions.</p>\n<p>They are both called automatically when a dependency changes.</p>\n<ul>\n<li>Never called from HTML.</li>\n</ul>\n<p>Some differences:</p>\n<ul>\n<li>Watchers depend on one property, the one they watch.</li>\n<li>Computed properties depend on many.</li>\n<li>Computed properties are used like data properties, they are dynamic.</li>\n<li>Watchers are not referred to from HTML.</li>\n</ul>",
  "title": "Vue Watchers",
  "date": "July 11, 2025",
  "category": "Vue",
  "categories": []
}